#!/bin/sh
# Name: $RCSfile$
# CVS file: $Source$ 
# CVS id: $Header$ 
# Revision: $Revision$ 
# Revised on: $Date$
# Revised by: $Author$ 
# Support: Fernando Nunes - domusonline@gmail.com

setinfx_trap_int()
{
	return 6
}

setinfx_set_clean_path()
{
	SETINFX_OLD_PATH="$1"
	SETINFX_OLD_LIB_PATH="$2"

	$AWK -v SYSTEM_LIB_PATH="${SETINFX_SYS_LD_LIB_PATH=}" -F: ' \
	BEGIN { 
		#-----------------------------------------------------
		# Creates a list of paths to clean
		#-----------------------------------------------------
		a=0;
		idx=0;
		params_file=sprintf("%s/'$INFX_PARAMS'","'$IFMXETC'");
		while ( getline ifmxpath[++idx] < params_file )
		{
			if  ( ifmxpath[idx] ~ /^[a-z_A-Z][a-z_A-Z]*:.*/ )
			{
				idx--;
			}
			else
			{
				a=1;
			}
		}
		PATH_IDX=idx;
		#-----------------------------------------------------
		# Add SYSTEM_LIB_PATH to the above list...
		#-----------------------------------------------------
		if ( SYSTEM_LIB_PATH != "" && SYSTEM_LIB_PATH != " ")
		{
			i=split(SYSTEM_LIB_PATH,system_ld,'/:/')
			for (n=1;n<=i;n++)
			{
				ifmxpath[++idx]=system_ld[n];
			}
		}
		LIB_PATH_IDX=idx;
		if ( a == 0 )
		{
			print "NO param lines !";
			exit (-1);
		}
	}
	{
		ADD_SEP=0;
		for ( wrd=1; wrd<=NF; wrd++)
		{
			if ( $wrd == " " )
				next;
			dontprint=0;
			for ( jdx=1;jdx<=LIB_PATH_IDX;jdx++ )
			{
				if (NR == 1 && ( (jdx+0) > (PATH_IDX+0)) )
					break;
				if ( $wrd ~ "^"ifmxpath[jdx] )
				{
					dontprint=1;
					jdx=idx+1;
				}
			}
			if ( dontprint == 0 && $wrd != "" )
			{
				if (ADD_SEP == 0)
				{
					printf("%s",$wrd);
					ADD_SEP=1;
				}
				else
					printf(":%s",$wrd);
			} 
		}
		printf " ";
	}' <<EOF
$SETINFX_OLD_PATH
$SETINFX_OLD_LIB_PATH
EOF
} 



setinfx_main()
{

# to prevent background jobs when CTRL+C in read... (Tru64)
trap setinfx_trap_int 2

SETINFX_HOSTNAME=`hostname`

#----------------------------------------------------------------------------
# Find the configuration file...
#----------------------------------------------------------------------------

# ~informix is not expanded in some systems
SETINFX_INFORMIX_HOME=`grep "^informix:" /etc/passwd | cut -f6 -d':'`
SETINFX_CONF_DIRS="${SETINFX_INFORMIX_HOME}/etc /usr/bin/utils /usr/bin/scripts"
unset SETINFX_INFORMIX_HOME
for SETINFX_DIR in ${SETINFX_CONF_DIRS}
do
	if [ -r ${SETINFX_DIR}/${INFX_CONF} ]
	then
		IFMXETC=${SETINFX_DIR}
		export IFMXETC
		break
	fi
done
unset SETINFX_CONF_DIRS SETINFX_DIR

if [ "X${IFMXETC}" = "X" ]
then
	echo "Configuration files not found" >&2
	return 1
fi

if [ ! -r ${IFMXETC}/${INFX_PARAMS} ]
then
	echo "Cannot locate file $IFMXETC/$INFX_PARAMS" >&2
	return 1
fi

#----------------------------------------------------------------------------
# Check the user
#----------------------------------------------------------------------------
SETINFX_USER=`id | $AWK -F"[()]" ' { print $2 } '`

#----------------------------------------------------------------------------------------------
# Check the specified System Library Path. If defined should be put at the head of the variable
#----------------------------------------------------------------------------------------------
SETINFX_SYS_LD_LIB_PATH="`grep '^system_ld_library_path *:' ${IFMXETC}/${INFX_PARAMS}`"
if [ $? = 0 ]
then
	SETINFX_SYS_LD_LIB_PATH=`echo $SETINFX_SYS_LD_LIB_PATH | $AWK -F':' '{print $2}'`
else
	SETINFX_SYS_LD_LIB_PATH=""
fi

case $1 in
L)
	#-----------------------------------------------------------
	# To allow privilege users to see unprivileged users options
	#-----------------------------------------------------------
	SETINFX_USERTYPE="prg"
	set l
	;;
-[0-9]|-[0-9][0-9]|-[0-9][0-9][0-9])
	#-----------------------------------------------------------
	# To allow privilege users choose unprivileged users options
	#-----------------------------------------------------------
	SETINFX_USERTYPE="prg"
	set `echo $1 | sed 's/\-//g'`
	;;
[0-9]|[0-9][0-9]|[0-9][0-9][0-9]|l)
	if [ $SETINFX_USER = "informix" -o $SETINFX_USER = "root" ]
	then
		SETINFX_USERTYPE="adm"
	else
		SETINFX_USERTYPE="prg"
		SETINFX_IX_ADMIN_GROUPS="`grep '^admingroups *:' ${IFMXETC}/${INFX_PARAMS}`"
		if [ $? = 0 ]
		then
			SETINFX_IX_ADMIN_GROUPS=`echo "$SETINFX_IX_ADMIN_GROUPS" | cut -f2 -d':'`
			for SETINFX_ADMIN_GROUP in $SETINFX_IX_ADMIN_GROUPS
			do
				id ${SETINFX_ID_FLAGS} | grep "(${SETINFX_ADMIN_GROUP})" >/dev/null
				if [ $? = 0 ]
				then
					SETINFX_USERTYPE="adm"
					break
				fi
			done
		fi
	fi
	;;
*)
	echo "Error in parameter (function setinfx_main): $1" >&2
	return 1
	;;
esac

SETINFX_AUX="`setinfx_set_clean_path $PATH $LD_LIBRARY_PATH`"
read SETINFX_CLEAN_PATH SETINFX_CLEAN_LD_LIB_PATH<<EOF
$SETINFX_AUX
EOF

SETINFX_SELECT_OPT=$1

SETINFX_LINHA_CONF=\
`$AWK -F"|" -v NOPRINT=${SETINFX_NOT_A_TTY} ' BEGIN { 
		SELECT_OPT="'$SETINFX_SELECT_OPT'";
		idx=0;
		if ( SELECT_OPT == "l" )
			if ( NOPRINT == 0 ) printf("List of available INFORMIX environments on %s      (setinfx version '$SETINFX_VERSION')\n\n","'$SETINFX_HOSTNAME'") > "/dev/tty" ;
		lnnum=0;
		TOOLS_CR_FILES[1]="I4GL";
		TOOLS_CR_FILES[2]="I4GP";
		TOOLS_CR_FILES[3]="ISQL";
		TOOLS_CR_FILES[4]="ClientSDK";
		TOOLS_CR_LIMIT=4;
	}
	$1 !~ "#" && $0 !~ "^$" { 
		if ( NF < 7 ) 
		{ 
			if ( $1 !~ "^inactiv")
			{
				printf ("Line # %d in configuration file has incorrect format\n", FNR) > "/dev/tty";
				exit 1;
			}
			else
			{
				lnnum++;
				next
			}
		}	
		if ( "'$SETINFX_USERTYPE'" != "adm" && $7 == "S" )
		{
			next ;
		}
		if ( $1 ~ "^inactiv")
		{
			lnnum++;
			next
		}
		lnnum++;
		if ( $7 !~ "[SsDdY]" ) { 
			printf("Line %d : INVALID envtype %s\n",lnnum,$7) > "/dev/tty";
			exit 2;
		}
		if ( $2 == "" ) {
			printf("Line %d : NULL INFORMIXSERVER\n",lnnum) > "/dev/tty";
			exit 2;
		}
		if ( $4 == "" ) {
			printf("Line %d : NULL INFORMIXDIR\n",lnnum) > "/dev/tty";
			exit 2;
		}
		if ( $3 == "" )
		{
			if ( $7 ~ "[Ss]")
			{
				printf("Line %d : NULL ONCONFIG\n",lnnum) > "/dev/tty";
				exit 2;
			}
			ONCONFIG="NULL";
		}
		else
			ONCONFIG=$3;

		if ( $6 == "" )
			SQLHOSTS="NULL";
		else
			SQLHOSTS=$6;

		if ( $10 == "" )
			EXTRA_SCRIPT="NULL";
		else
			EXTRA_SCRIPT=$10;
			
		lines[lnnum]=sprintf("%s %s %s %s %s %s %s %s %s\n", lnnum, $2, ONCONFIG, $4, $5, SQLHOSTS, $7, EXTRA_SCRIPT, $1);
		if ( SELECT_OPT == "l")
		{
	
			if ( $7 ~ "[Ss]" ) {
				cmd1=sprintf("ls -1t %s/etc/*-cr | egrep \"IDS|IIF\" | head -1",$4);
				cmd1 | getline file;
				close(cmd1);
			}


			if ( $7 ~ "[Dd]" )
			{
				for ( n=1;n<=TOOLS_CR_LIMIT;n++)
				{
					file=sprintf("%s/etc/%s-cr",$4,TOOLS_CR_FILES[n]);
					aux=getline dummy_var < file;
					close(file);
					if ( aux != -1 )
					{
						break;
					}
				}
				if ( aux == -1 )
				{
					printf "No valid CR file for environment %d\n", lnnum > "/dev/tty";
					exit 2;
				}
		
				
				
			}
			if ( $7 == "Y" )
				file=sprintf("%s/etc/D4GL-cr",$5);
				cmd=sprintf("cat %s/etc/D4GL-cr",$5);
	
			getline vers < file;
			close(file);
			if ( NOPRINT == 0 ) printf("%2d) %-30s (%s)\n",lnnum,$1,vers) > "/dev/tty" ;
		}
		
		display[lnnum]=sprintf("%2d) %-30s (%s)\n",lnnum,$1,vers);
		if ( SELECT_OPT != "l")
		{
			if (lnnum == SELECT_OPT)
			{
				printf "%s\n", lines[lnnum];
				exit 0;
			}
			else
			{
				if ((lnnum + 0) > (SELECT_OPT+0))
				{
					printf "The selected environment is inactive %s %s!\n",lnnum,SELECT_OPT > "/dev/tty"
					exit 2;
				}
			}
		}
	} 
	END {
		
		ATTEMPTS=5;
		if ( SELECT_OPT == "l")
		{
			while(ATTEMPTS>0) \
			{
				if ( NOPRINT == 0 ) printf("\nChoose an environment number (1-%d q to quit) : ",lnnum) > "/dev/tty";
				getline SELECT_OPT <"/dev/tty";
				if ( SELECT_OPT ~ /^[0-9][0-9]*/ )
				{
					if (SELECT_OPT > lnnum )
					{
						if ( NOPRINT == 0 ) printf "Invalid environment selected (environment does not exist)\n" >"/dev/tty";
					}
					else
					{
						if ( lines[SELECT_OPT] != "" )
						{
							print lines[SELECT_OPT];
							exit 0;
						}
						else
						{
							if ( NOPRINT == 0 ) printf "An inactive environment was selected\n" > "/dev/tty";
						}
					}
				}
				else
				{
						if ( SELECT_OPT ~ /[qQ]/ )
						{
							if ( NOPRINT == 0 ) printf "Exiting without choosing an environment\n" > "/dev/tty";
							exit 1;
						}
						else
							if ( NOPRINT == 0 ) printf "Invalid input. Must be numeric" >"/dev/tty";
				}
				if ( NOPRINT == 0 ) printf "\033[2J\033[;H" > "/dev/tty";
				if ( NOPRINT == 0 ) printf("List of available INFORMIX environments on %s      (setinfx version '$SETINFX_VERSION')\n\n","'$SETINFX_HOSTNAME'") > "/dev/tty" ;
				for(n=1;n<=lnnum;n++)
				{
					if ( display[n] != "" )
						if ( NOPRINT == 0 ) printf "%s", display[n] > "/dev/tty";
				}
				ATTEMPTS--;
			}
			if ( NOPRINT == 0 ) printf "too many attempts, exiting\n" > "/dev/tty";
			exit 3;
		}
		else
			if ((SELECT_OPT+0) > (lnnum +0))
			{
				printf "Invalid environment selected (environment does not exist)\n" >"/dev/tty";
				exit 2;
			}
	}
	' $IFMXETC/$INFX_CONF`

SETINFX_RC=$?
if [ $SETINFX_RC != 0 ]
then
	return $SETINFX_RC
fi

read SETINFX_CURRENT INFORMIXSERVER ONCONFIG INFORMIXDIR SETINFX_LNK_DIR INFORMIXSQLHOSTS SETINFX_ENVTYPE SETINFX_ENV_FILE SETINFX_ENV_DESC<<EOF
$SETINFX_LINHA_CONF
EOF

if [ $SETINFX_NOT_A_TTY = 0 ]
then
	printf "Welcome to $SETINFX_ENV_DESC\n"
fi

if [ ! -d $INFORMIXDIR ]
then
	echo "INFORMIXDIR not valid $INFORMIXDIR"
	return 1
fi
if [ "$ONCONFIG" != "NULL" ]
then
	if [ ! -r $INFORMIXDIR/etc/$ONCONFIG ]
	then
		echo "ONCONFIG not valid $ONCONFIG"
		return 1
	fi
else
	unset ONCONFIG
fi

case $SETINFX_ENVTYPE in
s|S)
	if [ -z "$SETINFX_CLEAN_LD_LIB_PATH" ]
	then
		unset LD_LIBRARY_PATH
	else
		LD_LIBRARY_PATH=$SETINFX_CLEAN_LD_LIB_PATH
	fi
	PATH="$SETINFX_CLEAN_PATH:$INFORMIXDIR/bin"
	;;
D|Y)
	if [ ! -z "$SETINFX_CLEAN_LD_LIB_PATH" ]
	then
		SETINFX_CLEAN_LD_LIB_PATH="$SETINFX_CLEAN_LD_LIB_PATH:"
	fi
	LD_LIBRARY_PATH=`find $INFORMIXDIR/lib -type d | \
	$AWK -v system_ld_lib_path="${SETINFX_SYS_LD_LIB_PATH}" ' {
		if ( ld_l_p != "" )
		{
			ld_l_p=sprintf("%s:%s",ld_l_p,$1);
		}
		else
		{
			ld_l_p=$1;
		}		
	}
	END {
		
		if ( system_ld_lib_path != "" )
			printf("%s:%s%s",system_ld_lib_path,"'$SETINFX_CLEAN_LD_LIB_PATH'", ld_l_p);
		else
			printf("%s%s","'$SETINFX_CLEAN_LD_LIB_PATH'", ld_l_p);
	 }' `
	export LD_LIBRARY_PATH

	if [ $SETINFX_ENVTYPE = "D" ]
	then
		# Making aliases with servers utilities
		# building pseudo tools in $INFORMIXDIR
		IFMXSRVRDIR=$SETINFX_LNK_DIR
		export IFMXSRVRDIR
		PATH=$SETINFX_CLEAN_PATH:$INFORMIXDIR/bin
	fi
	if [ $SETINFX_ENVTYPE = "Y" ] 
	then
		USERNAME=$SETINFX_USER
		[ -z "$FGLSERVER" ] && FGLSERVER=`who am i | cut -f2 -d'(' | cut -f1 -d')'`
		export FGLSERVER
		FGLGUI=1
		export FGLGUI
		FGLDIR=$SETINFX_LNK_DIR
		export FGLDIR
		PATH=$SETINFX_CLEAN_PATH:$FGLDIR/bin:$INFORMIXDIR/bin

		#------- Database frontend version

		FGLDBS="ix711"
		export FGLDBS

		#------- Informix SQL libraries

		FGLLIBSQL="-L$INFORMIXDIR/lib/tools -lfesql -los -lasf $INFORMIXDIR/lib/tools/libasf.a -los -lasf \
				-lgen $INFORMIXDIR/lib/tools/libgls.a $INFORMIXDIR/lib/tools/libglx.a"
		export FGLLIBSQL


		#------- System libraries

		FGLLIBSYS="-ltli -lxti -lc -lm"
		export FGLLIBSYS
	fi 
	;;
esac


if [ ! -f $INFORMIXSQLHOSTS ]
then
	INFORMIXSQLHOSTS=$INFORMIXDIR/etc/sqlhosts
	if [ ! -f "$INFORMIXSQLHOSTS" ]
	then
		echo "sqlhosts file not found, cannot connect"
		return 1
	fi
fi
grep "^$INFORMIXSERVER[ 	]" $INFORMIXSQLHOSTS >/dev/null
if [ $? != 0 ]
then
	echo "$INFORMIXSERVER not found in sqlhosts, cannot connect"
	return 1
fi


export INFORMIXSERVER
export INFORMIXSQLHOSTS
export ONCONFIG
export INFORMIXDIR
export SETINFX_CURRENT
export PATH
export LD_LIBRARY_PATH
	
if [ $SETINFX_USERTYPE = "adm" ]
then
	PS1="${INFORMIXSERVER}@${SETINFX_HOSTNAME}:${LOGNAME}-> "
	export PS1
fi

if [ "X${SETINFX_ENV_FILE}" != "XNULL" ]
then
	. ${IFMXETC}/${SETINFX_ENV_FILE}
fi
}

#-------------------------------------------------------------------------------
# Script start...
#-------------------------------------------------------------------------------

SETINFX_SO=`uname -s | tr "[A-Z]" "[a-z]"`
case $SETINFX_SO in
sunos*)
        AWK=nawk
        SETINFX_AWK_FALLBACK=awk
        SETINFX_ID_FLAGS=-a
        ;;
osf*|hp-ux)
        AWK=gawk
        SETINFX_AWK_FALLBACK=awk
        SETINFX_ID_FLAGS=
        ;;
linux|*)
        AWK=awk
        SETINFX_AWK_FALLBACK=NO
        SETINFX_ID_FLAGS=
        ;;
esac



which ${AWK} | grep "^/.*${AWK}$" >/dev/null
if [ $? != 0 ]
then
        if [ "X${SETINFX_AWK_FALLBACK}" = "XNO" -o "X${SETINFX_AWK_FALLBACK}" = "X" ]
        then
                echo "Cannot find ${AWK} and there is no SETINFX_AWK_FALLBACK defined" >&2
                return 1
        else
                AWK=${SETINFX_AWK_FALLBACK}
        fi
fi

export AWK

SETINFX_ARGC=$#
# test tty if run by background
if [ "X$SETINFX_SILENT" = "X" ]
then
        tty 1>/dev/null 2>/dev/null
        SETINFX_NOT_A_TTY=$?
else
	if [ "X$1" = "Xl" -o "X$1" = "XL" -o $SETINFX_ARGC = 0 ]
	then
		SETINFX_NOT_A_TTY=0
	else
	        SETINFX_NOT_A_TTY=1
	fi
fi

case $0 in
-sh|sh)
	echo "setinfx does not work in sh environment. Please use ksh or bash" >&2
	return 1
	;;
*)

	SETINFX_VERSION=`echo "$Revision$" | cut -f2 -d' '`
	if [ -z "${SETINFX_CONF}" ]
	then
		INFX_CONF=infx_env.lst
	else
		INFX_CONF=$SETINFX_CONF
	fi

	if [ -z "${SETINFX_PARAMS}" ]
	then
		INFX_PARAMS=setinfx.params
	else
		INFX_PARAMS=${SETINFX_PARAMS}
	fi

	if [ "X$SETINFX_NOT_A_TTY" = "X0" ]
	then
		printf "\033[2J\033[;H"
	fi

	# checking params
	case $SETINFX_ARGC in
	1)
		setinfx_main $1
		SETINFX_RC=$?
		#-------------------------------------------------------------------------------------------------------
		# This shift is required because since the script is sourced, the argument list would prevail forever...
		#-------------------------------------------------------------------------------------------------------
		shift
		;;
	0)
		setinfx_main l
		SETINFX_RC=$?
		;;
	*)
		echo "Usage: . setinfx < l(ist) | 1-$maxsrv >"
	esac
	unset SETINFX_AUX SETINFX_AWK_FALLBACK SETINFX_ID_FLAGS INFX_CONF INXF_PARAMS SETINFX_LINHA_CONF SETINFX_SELECT_OPT SETINFX_SO INFX_PARAMS INFX_CONF
	unset SETINFX_HOSTNAME SETINFX_IX_ADMIN_GROUPS SETINFX_ADMIN_GROUP SETINFX_ENV_DESC SETINFX_ENV_FILE SETINFX_NOT_A_TTY INFORMIX_HOME SETINFX_LNK_DIR
	unset SETINFX_SYS_LD_LIB_PATH SETINFX_ARGC SETINFX_CLEAN_LD_LIB_PATH SETINFX_CLEAN_PATH SETINFX_USER SETINFX_USERTYPE SETINFX_ENVTYPE
	return $SETINFX_RC
	;;
esac
