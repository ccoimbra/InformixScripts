#!/bin/sh
# Name: $RCSfile$
# CVS file: $Source$ 
# CVS id: $Header$ 
# Revision: $Revision$ 
# Revised on: $Date$
# Revised by: $Author$ 
# Support: Fernando Nunes - fernando.nunes@tmn.pt
# History:
# 1.16 - Numero de versao passou a ser o do CVS
#      - Retirou-se o "clear" quando esta posicionado o SETINFX_SILENT
#      - as linhas "inactivas" nao precisam de ter formato correcto
# 8.13 - Troca da execucao de scripts SHELL para o fim do setinfx
# 8.12 - Introducao da variavel SETINFX_SILENT. Tera de ser revisto numa futura versao
# 8.11 - Eliminacao do processamento dos utilitarios de servidor nos ambientes de ferramentas
# 8.10 - Optimizacao das leituras dos ficheiros
# 8.9  - Introducao de campo com script SHELL a executar
# 8.8  - Alteracao das localizacoes dos ficheiros de configuracao
# 8.7  - Correccao de bug que fazia aparecer sempre a ultima versao do motor
# 8.6  - Correccao de debug para fm.tmp
#      - Preparacao para IIF ($INFORMIXDIR/etc/IIF-cr)
#      - Impedir que de erros depois de atingir o limite de entradas invalidas
#      - Ajustar a utilizao do awk ou nawk conforme o SO
# 8.5  - Code review
#      - Minor chages in conf variables

set_clean_path()
{
	old_path="$1"

	if [ -r ${INFX_ETC}/${INFX_PARAMS} ]
	then
		a=1
	else
		echo "Cannot locate file $INFX_ETC/$INFX_PARAMS" >&2
		return 1
	fi
	new_path=`echo "$old_path" | $AWK -F: ' \
	BEGIN { a=0;
		idx=0;
		params_file=sprintf("%s/'$INFX_PARAMS'","'$INFX_ETC'");
		while ( getline ifmxpath[++idx] < params_file ) {
			if  ( ifmxpath[idx] ~ "^[a-z]*:.*" )
			{
				idx--;
			}
			else
			{
				a=1;
			}
		}
		if ( a == 0 ) {
			print "NO param lines !";
			exit (-1);
		}
	}
	{ 
		for ( wrd=1; wrd<=NF; wrd++) {
			if ( $wrd == " " )
				next;
			dontprint=0;
			for ( jdx=1;jdx<=idx;jdx++ ) {
				if ( $wrd ~ "^"ifmxpath[jdx] ) {
					dontprint=1;
					jdx=idx+1;
				}
			}
			if ( dontprint == 0 && $wrd != "" ) {
				printf("%s:",$wrd);
			} 
		}
	} '`
	echo $new_path
} 



main()
{

SO=`uname -s | tr "[A-Z]" "[a-z]"`
case $SO in
sunos*)
	AWK=nawk
	ID_FLAGS=-a
	;;
osf*)
	AWK=nawk
	ID_FLAGS=
	;;
linux|*)
	AWK=awk
	ID_FLAGS=
	;;
esac

export AWK

# test tty if run by background
if [ "X$SETINFX_SILENT" = "X" ]
then
        tty 1>/dev/null 2>/dev/null
        not_a_tty=$?
else
        not_a_tty=1
fi


INFORMIX_HOME=`grep "^informix:" /etc/passwd | cut -f6 -d':'`
CONF_DIRS="${INFORMIX_HOME}/etc /usr/bin/utils /usr/bin/scripts"
for DIR in ${CONF_DIRS}
do
	if [ -r ${DIR}/${INFX_CONF} ]
	then
		INFX_ETC=${DIR}
		export INFX_ETC
		break
	fi
done
if [ "X${INFX_ETC}" = "X" ]
then
	echo "Configuration files not found" >&2
	return 1
fi

user=`id | $AWK -F"[()]" ' { print $2 } '`
ixadmingroups="`grep '^admingroups:' ${INFX_ETC}/${INFX_PARAMS}`"
if [ $? = 0 ]
then
	ixadmingroups=`echo "$ixadmingroups" | cut -f2 -d':'`
else
	ixadmingroups=ixdba
fi

userdba=0
for ixadmingroup in $ixadmingroups
do
	id ${ID_FLAGS} | grep "(${ixadmingroup})" >/dev/null
	if [ $? = 0 ]
	then
		userdba=1
		break
	fi
done

if [ $user = "informix" -o $user = "root" -o ${userdba} = 1 ]
then
	usertype="adm"
else
	usertype="prg"
fi

server_ok=0


#-----------------------------------------
# Real number of environments in this file
# Create a list of "inactive" environments
#-----------------------------------------
fmaux=`$AWK -F"|" ' BEGIN { usertype="'$usertype'";lnnum=0 }
$1 !~ "#" && $0 !~ "^$" \
{
	if ( NF < 7)
	{
		if ( $1 ~ "^inactivo")
		{
				invalid_list=sprintf("%s%d ", invalid_list,++lnnum);
		}
	}
	else
	{
		if ( "'$usertype'" != "adm" && $7 == "S" ) {next} ;
		lnnum++
		if ( $1 ~ "^inactivo")
		{
			invalid_list=sprintf("%s%d ", invalid_list,lnnum);
		}
	}
} 
END { print lnnum "+" invalid_list } ' ${INFX_ETC}/${INFX_CONF}`


maxsrv=`echo "$fmaux" | cut -f1 -d'+'`
INVALID_LIST=`echo $fmaux | cut -f2 -d'+'`

if [ $1 = "l" ]
then
	option="list"
else
	if [ $1 -ge 1 -a $1 -le $maxsrv ]
	then
		for f in $INVALID_LIST
		do
			if [ $1 -eq $f ]
			then
				echo "Invalid environment selected" >&2
				return 1
			fi
		done
		option="chosen"
		server_num=$1
	else
		echo "Usage: . setinfx < l(ist) |  1-$maxsrv >"
		return 1
	fi
fi

clean_path=`set_clean_path $PATH`

if [ $option = "list" ]
then
	attempts=0
	while [ $server_ok -eq 0 ]
	do
		clear
		attempts=`expr $attempts + 1`
		if [ $attempts -gt 5 ]
		then
			echo "too many attempts, exiting"
			return 1
		fi
		$AWK -F"|" ' BEGIN \
			{ 
			
			"hostname" | getline HOSTNAME
			printf("List of available INFORMIX environments on %s      (setinfx version '$VERSION')\n\n",HOSTNAME) > "/dev/tty" ;
			usertype="'$usertype'";
			lnnum=0;
			} #BEGIN
			$1 !~ "#" && $0 !~ "^$" \
			{ 
					if ( NF < 7 ) 
					{ 
						if ( $1 !~ "^inactivo")
						{
							printf ("Line # %d in configuration file has incorrect format\n",
							FNR) > "/dev/tty";
							exit -1;
						}
						else
						{
							lnnum++;
							next
						}
					}	
					if ( "'$usertype'" != "adm" && $7 == "S" ) next ;
					if ( $1 ~ "^inactivo")
					{
						lnnum++;
						next
					}
						
					cmd="";

					if ( $7 !~ "[SsDdY]" ) { 
						printf("Line %d : INVALID envtype %s\n",lnnum+1,$7);
						exit -1;
					}

					if ( $7 ~ "[Ss]" ) {
						cmd1=sprintf("ls -1t %s/etc/*-cr | egrep \"IDS|IIF\" | head -1",$4)
						cmd1 | getline file;
						close(cmd1);
						cmd=sprintf("cat %s",file);
					}


					if ( $7 ~ "[Dd]" )
					{
						cmd1=sprintf("ls -1t %s/etc/*-cr | egrep \"I4GL|ClientSDK|ISQL\" | head -1",$4)
						cmd1 | getline file;
						close(cmd1);
						cmd=sprintf("cat %s",file);
					}
					if ( $7 == "Y" )  cmd=sprintf("cat %s/etc/D4GL-cr",$5);

					cmd | getline vers;
					close(cmd);
					printf("%2d) %-30s (%s)\n",++lnnum,$1,vers) > "/dev/tty" 
			} 
			END {
				printf("\nChoose an environment number (1-%d q to quit) : ",lnnum) \
				> "/dev/tty"  }  \
				' $INFX_ETC/$INFX_CONF

			if [ $? -ne 0 ]
			then
				echo "Configuration file has incorrect format" >&2
				return 1
			fi
			read server_num
			case $server_num in
			[Qq] )
				echo "Exiting without choosing an environment"
				return 1;;
			[0-9]*)
				a=1;;
			*)
				server_ok=0
				continue ;;
			esac
			if [ $server_num -gt 0 ] && [ $server_num -le $maxsrv ]
			then
				server_ok=1
				for f in $INVALID_LIST
				do
					if [ $server_num -eq $f ]
					then
						server_ok=0
					fi
				done
			else
				server_ok=0
			fi	
		done
	fi

	the_fnr=`$AWK -F"|" ' BEGIN {line_num=0;server_num='$server_num' } \
	$1 !~ "#" && $0 !~ "^$" \
	{ 
		if ( "'$usertype'" != "adm" && $7 == "S" ) next;
		if (++line_num == server_num) 
		{ 
			if ( '$not_a_tty' == 0 ) printf("\nWelcome to %s\n",$1) > "/dev/tty";
			print FNR;exit
		}
	}
' $INFX_ETC/$INFX_CONF`
# now we export ALL the environment

#ENV_FILE=""
#ENV_FILE=\
#`$AWK -F"|" ' BEGIN { the_fnr='$the_fnr' }
#NR == the_fnr { print $10 ; exit } ' $INFX_ETC/$INFX_CONF`


LINHA_CONF=\
`$AWK -F"|" ' BEGIN { the_fnr='$the_fnr' }
NR == the_fnr \
{ if ( $7 ~ "[SsDY]" ) { print $0 ; exit 0 } } ' $INFX_ETC/$INFX_CONF`

ENVTYPE=`echo $LINHA_CONF | cut -f7 -d'|'`
INFORMIXSERVER=`echo $LINHA_CONF | cut -f2 -d'|'`
ONCONFIG=`echo $LINHA_CONF | cut -f3 -d'|'`
INFORMIXDIR=`echo $LINHA_CONF | cut -f4 -d'|'`
LNK_DIR=`echo $LINHA_CONF | cut -f5 -d'|'`
INFORMIXSQLHOSTS=`echo $LINHA_CONF | cut -f6 -d'|'`
IFMXDIR=$INFORMIXDIR
ENV_FILE=""
ENV_FILE=`echo $LINHA_CONF | cut -f10 -d'|'`

export ENVTYPE
export INFORMIXSERVER
export INFORMIXSQLHOSTS
export ONCONFIG
export INFORMIXDIR
export IFMXDIR
export LNK_DIR



if [ ! -d $INFORMIXDIR ]
then
	echo "INFORMIXDIR not valid $INFORMIXDIR"
	return 1
fi
if [ "$ONCONFIG" != "" ]

then
	if [ ! -r $INFORMIXDIR/etc/$ONCONFIG ]
	then
		echo "ONCONFIG not valid $ONCONFIG"
		return 1
	fi
fi

if [ $ENVTYPE = "D" -o $ENVTYPE = "Y" ]
then
	clean_ld_library_path=`set_clean_path $LD_LIBRARY_PATH`

	LD_LIBRARY_PATH=`find $INFORMIXDIR/lib -type d | \
	$AWK ' { if ( ld_l_p != "" ) ld_l_p=sprintf("%s:%s",ld_l_p,$1); \
	else ld_l_p=$1;} END { printf("%s:%s",ld_l_p,"'$clean_ld_library_path'") }' `
	export LD_LIBRARY_PATH

	if [ $ENVTYPE = "D" ]
	then
		# Making aliases with servers utilities
		# building pseudo tools in $INFORMIXDIR
		IFMXSRVRDIR=$LNK_DIR
		export IFMXSRVRDIR
	fi
	if [ $ENVTYPE = "Y" ] 
	then
		LINE=`tty | sed -e "s/^.*tty//"`
		# preparing FGLSERVER
		USERNAME=`who am i | $AWK '{ print $1 }'`
		[ -z "$FGLSERVER" ] && FGLSERVER=`w | egrep "^$USERNAME .* $LINE " | $AWK '{ print $3 }'`
		export FGLSERVER
		FGLGUI=1
		export FGLGUI
		export FGLDIR=`$AWK -F"|" ' BEGIN { the_fnr='$the_fnr' } \
		NR == the_fnr { print $5 ; exit } ' $INFX_ETC/$INFX_CONF`
		# echo "FGLDIR $FGLDIR"
		clean_path=$FGLDIR/bin:$clean_path
		export clean_path
		#------- Database frontend version

		FGLDBS="ix711"
		export FGLDBS

		#------- Informix SQL libraries

		FGLLIBSQL="-L$INFORMIXDIR/lib/tools -lfesql -los -lasf $INFORMIXDIR/lib/tools/libasf.a -los -lasf \
				-lgen $INFORMIXDIR/lib/tools/libgls.a $INFORMIXDIR/lib/tools/libglx.a"
		export FGLLIBSQL


		#------- System libraries

		FGLLIBSYS="-ltli -lxti -lc -lm"
		export FGLLIBSYS
		LD_LIBRARY="zz"
		export LD_LIBRARY
	fi 
fi


if [ ! -f $INFORMIXSQLHOSTS ]
then
	INFORMIXSQLHOSTS=$INFORMIXDIR/etc/sqlhosts
	export INFORMIXSQLHOSTS
	if [ ! -f "$INFORMIXSQLHOSTS" ]
	then
		echo "sqlhosts file not found, cannot connect"
		return 1
	fi
fi
sqlhok=\
`$AWK ' $1 == "'$INFORMIXSERVER'" { ok++ } END { print ok }' $INFORMIXSQLHOSTS`
if [ "$sqlhok" != "1" ]
then
	echo "$INFORMIXSERVER not found in sqlhosts, cannot connect"
	return 1
fi


SETINFX_CURRENT=${server_num}
export SETINFX_CURRENT
PATH="$INFORMIXDIR/bin:$clean_path"
export PATH
	
onconf=$INFORMIXDIR/etc/$ONCONFIG
export onconf
if [ "$ENVTYPE" = "S" ] || [ "$ENVTYPE" = "s" ]
then
	IFMXETC=${INFORMIX_HOME}/etc
	export IFMXETC
fi
if [ $usertype = "adm" ]
then
	PS1="${INFORMIXSERVER}@`hostname`:${LOGNAME}-> "
	export PS1
fi

if [ "X${ENV_FILE}" != "X" ]
then
	. ${INFX_ETC}/${ENV_FILE}
fi
}


VERSION=`echo "$Revision$" | cut -f2 -d' '`
if [ -z "${INFX_CONF}" ]
then
	INFX_CONF=infx_env.lst
fi
INFX_PARAMS=setinfx.params
argc=$#
if [ "X$SETINFX_SILENT" = "X" ]
then
	clear
fi

# checking params
case $argc in
1)
	main $1
	shift
	;;
0)
	main l
	;;
*)
	echo "Usage: . setinfx < l(ist) | 1-$maxsrv >"
esac
