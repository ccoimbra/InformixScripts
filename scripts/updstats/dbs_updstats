#!/bin/sh
# Name: $RCSfile$
# CVS file: $Source$
# CVS id: $Header$
# Revision: $Revision$
# Revised on: $Date$
# Revised by: $Author$
# Support: Fernando Nunes - domusonline@domus.online.pt
# License: This software is provided under GPLv2 - http://www.gnu.org/licenses/gpl.txt
# This script runs the tbl_updstats script for each table in the database


PROGNAME=`basename $0`
VERSION=`echo "$Revision$" | cut -f2 -d' '`

show_help()
{
	printf "${PROGNAME}: -V | -h | { -d database } [ -f filter ] [ -e |  -E file] [ -p priority ]\n[ -P | -N ] [ -m size ] [ -r resolution ] [ -c confidence ] [ -R resolution ] [ -T ] [ -s ] [-l ] [ -x | -X ] [ -y ] [ -z | -Z ]\n" >&2
	echo "               {-d database} (required)" >&2
	echo "               {-f table} filter (optional)" >&2
	echo "               [-h] Show help and exit">&2
	echo "               [-V] Show version and exit">&2
	echo "               [-e] Set explain on (versions >= 7.31.UD2 and 9.30.UC2)" >&2
	echo "               [-E file] Set explain to a file (versions >= 11.10)" >&2
	echo "               [-p priority] Set pdqpriority (versions >= 7.31.UD2 and 9.30.UC2)" >&2
	echo "               [-P] Updates statistics for procedures also (default without filter)" >&2
	echo "               [-N] Don't update statistics for procedures (default with filter)" >&2
	echo "               [-r resolution] Set resolution for MEDIUM distributions" >&2
	echo "               [-c confidence] Set confidence" >&2
	echo "               [-m size] Set minimum sample size (versions >= 11.10)">&2
	echo "               [-R resolution] Set resolution for HIGH distributions" >&2
	echo "               [-l] Use quick LOW mode (Avoid b-tree leaf scan. Only minimal table info is collected)" >&2
	echo "               [-T] Include timings" >&2
	echo "               [-s] Include system catalog tables" >&2
	echo "               [-x] Option for tbl_updstats. Display only. Do not execute" >&2
	echo "               [-X] Option for tbl_updstats. Display and execute".>&2
	echo "               [-z] Display only. Do not execute" >&2
	echo "               [-Z] Display and execute" >&2
	echo "               [-y] Allow multiple parallel executions">&2
	echo "               [-o] Specify user for tbl_updstats (ANSI databases)">&2
	echo "               [-w N ] Set LOCK MODE WAIT N seconds">&2
	echo "Ex: dbs_updstats -d stores7 -f \\\" and tabname like \\'l%\\'\\\"" >&2
}

get_args()
{
	arg_ok='p:d:f:m:r:R:c:E:lePNVhTsyxXzZow:'
	list="$*"
	getopt ${arg_ok} $list >/dev/null 2>&1
	# check result of parsing                                                
	if [ $? != 0 ]
	then
		return 1
	fi
	set -- `getopt "${arg_ok}" $list`

	while [ $1 != -- ]
	do
		case $1 in
		-h)   # show help
			show_help
			exit 0
			;;
		-V)   # show version
			echo "${PROGNAME} version ${VERSION}" >&1
			exit 0
			;;
		-E)   # set up the -E (set explain flag with file..)
			EXPLAIN_FLAG=2
			explain_file=$2
			shift
			;;
		-z|-Z)   # set up the -zZ (set DISPLAY flag)
			if [ "$1" = "-z" ]
			then
				DISPLAY_FLAG=1
			else
				DISPLAY_FLAG=2
			fi
			;;
		-x|-X)   # set up the -xX (set CMD_DISPLAY flag)
			CMD_DISPLAY_FLAG=$1
			;;
		-l)   # set up the -l (set quick low mode flag)
			QUICK_LOW_MODE_FLAG=1
			;;
		-s)   # set up the -s (set SYSTABLES flag)
			SYSTABLES_FLAG=1
			;;
		-y)   # set up the -y (set MULTIPLE flag)
			MULTIPLE_FLAG=1
			;;
		-T)   # set up the -T (set TIMINGS flag)
			TIMINGS_FLAG=1
			;;
		-e)   # set up the -e (set explain flag)
			EXPLAIN_FLAG=1
			;;
		-d)   # set up the -d (database flag)
			DATABASE_FLAG=1
			dbserver=$2
			shift
			;;
		-p)   # set up the -p (pdqpriority flag)
			PRIORITY_FLAG=1
			priority=$2
			shift
			;;
		-P)   # set up the -P (for procedures flag)
			PROCEDURES_FLAG=1
			;;
		-N)   # set up the -N (NO procedures flag)
			PROCEDURES_FLAG=0
			;;
		-m)   # set up the -m (sampling flag)
			SAMPLING_FLAG=1
			sampling=$2
			shift
			;;
		-R)   # set up the -R (resolution high flag)
			RESOLUTION_HIGH_FLAG=1
			resolution_high=$2
			shift
			;;
		-r)   # set up the -r (resolution medium flag)
			RESOLUTION_MEDIUM_FLAG=1
			resolution_medium=$2
			shift
			;;
		-c)   # set up the -c (confidence flag)
			CONFIDENCE_FLAG=1
			confidence=$2
			shift
			;;
		-o)   # set up the -o (ANSI user flag)
			ANSI_USER_FLAG=1
			;;
		-S)   # set SET SESSION AUTH flag
			SET_AUTH_FLAG=1
			SET_AUTH_USER=$2
			shift
			;;
		-w)   # set up the -w (LOCK WAIT flag)
			LOCK_MODE_FLAG=1
			LOCK_MODE_TIME=$2
			echo ${LOCK_MODE_TIME} | grep "^[1-9][0-9]*" >/dev/null
			if [ $? != 0  ]
			then
				echo "${PROGNAME} Syntax error: LOCK WAIT time must be between a number >= 1" >&2
				return 1
			fi
			shift
			;;
		-f)   # set up the -f (filter flag)
			FILTER_FLAG=1
			case $2 in
			\"*)
				sel_filter="`echo $@ | cut -f2 -d'\"' | sed 's/--//'`"
				resto="`echo $* | cut -f3- -d'\"'`"
				;;
			*)
				echo "${PROGNAME} Syntax error: Argument for option '-f' must be enclosed in quotes" >&2
				return 1
			esac
			if [ "X$resto" = "X" ]
			then
				return
			fi
			arg_ok='p:d:f:m:r:R:c:E:lePNVhTsyxXzZow:'
			set -- `getopt "${arg_ok}" $resto`
			continue
			;;
		esac
		shift
	done
	shift   # skip double dash
	while [ $# -ge 1 ]
	do
		case $1 in
		-s)
			if [ "X"$SYSTABLES_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: SYSTABLES already processed" >&2
				return 1
			else
				SYSTABLES_FLAG=1
				shift
			fi;;
		-z|-Z)
			if [ "X"$DISPLAY_FLAG != "X" ]	
			then
				echo "${PROGNAME} Syntax error: DISPLAY already processed" >&2
				return 1
			else
				if [ "$1" = "-z" ]
				then
					DISPLAY_FLAG=1
				else
					DISPLAY_FLAG=2
				fi
				shift
			fi;;
		-x|-X)
			if [ "X"$CMD_DISPLAY_FLAG != "X" ]	
			then
				echo "${PROGNAME} Syntax error: DISPLAY already processed" >&2
				return 1
			else
				CMD_DISPLAY_FLAG=$1
				shift
			fi;;
		-y)
			if [ "X"$MULTIPLE_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: MULTIPLE already processed" >&2
				return 1
			else
				MULTIPLE_FLAGS=1
				shift
			fi;;
		-T)
			if [ "X"$TIMINGS_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: TIMINGS already processed" >&2
				return 1
			else
				TIMINGS_FLAG=1
				shift
			fi;;
		-E)
			if [ "X"$EXPLAIN_FLAG != "X" ]	
			then
				echo "${PROGNAME} Syntax error:  SET EXPLAIN already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					EXPLAIN_FLAG=2
					explain_file=$2
					shift 2
			fi;;
		-e)
			if [ "X"$EXPLAIN_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error:  SET EXPLAIN already processed" >&2
				return 1
			else
				EXPLAIN_FLAG=1
				shift
			fi;;
		-P)	if [ "X"$PROCEDURES_FLAG = "X1" -o "X"$PROCEDURES_FLAG = "X0" ]
			then
				echo "${PROGNAME} Syntax error: Options -P and -N are mutualy exclusive and one was already processed" >&2
				return 1
			else
				PROCEDURES_FLAG=1
				shift
			fi;;
		-N)	if [ "X"$PROCEDURES_FLAG = "X1" -o "X"$PROCEDURES_FLAG = "X0" ]
			then
				echo "${PROGNAME} Syntax error: Options -N and -P are mutualy exclusive and one was already processed" >&2
				return 1
			else
				PROCEDURES_FLAG=0
				shift
			fi;;
		-d)
			if [ "X"$DATABASE_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: DATABASE already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires and argument" >&2
					return 1
				else
					DATABASE_FLAG=1
					dbserver=$2
					shift 2
			fi;;
		-p)
			if [ "X"$PRIORITY_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: PRIORITY already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					PRIORITY_FLAG=1
					priority=$2
					if [ ${priority} -lt 1 -o ${priority} -gt 100 ]
					then
						echo "${PROGNAME} Syntax error: PDQPRIORITY value must be between 1 and 1000" >&2
						return 1
					fi
					shift 2
			fi;;
		-w)
			if [ "X"$LOCK_MODE_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: LOCK WAIT already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					LOCK_MODE_FLAG=1
					LOCK_MODE_TIME=$2
					echo ${LOCK_MODE_TIME} | grep "^[1-9][0-9]*" >/dev/null
					if [ $? != 0  ]
					then
						echo "${PROGNAME} Syntax error: LOCK WAIT time must be between a number >= 1" >&2
						return 1
					fi
					shift 2
			fi;;
		-m)
			if [ "X"$SAMPLING_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: SAMPLING already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					SAMPLING_FLAG=1
                                        sampling=$2
					echo ${sampling} | grep '^[0-9][0-9]*$' 2>&1 >/dev/null
					RESULT=$?
                                        if [ ${RESULT} != 0 -o ${sampling} -lt 1 ]
                                        then
                                                echo "${PROGNAME} Syntax error: SAMPLING value must be numeric and greater than 0" >&2
                                                return 1
                                        fi
                                        shift 2
                        fi;;
		-R)
			if [ "X"$RESOLUTION_HIGH_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: RESOLUTION HIGH already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					RESOLUTION_HIGH_FLAG=1
                                        resolution_high=$2
					echo ${resolution_high} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
					RESULT=$?
                                        if [ ${RESULT} != 0 -o ${resolution_high} -gt 100 ]
                                        then
                                                echo "${PROGNAME} Syntax error: RESOLUTION HIGH value must be numeric and less than or equal to 100" >&2
                                                return 1
                                        fi
                                        shift 2
                        fi;;
		-r)
			if [ "X"$RESOLUTION_MEDIUM_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: RESOLUTION MEDIUM already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					RESOLUTION_MEDIUM_FLAG=1
                                        resolution_medium=$2
					echo ${resolution_medium} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
					RESULT=$?
                                        if [ ${RESULT} != 0 -o ${resolution_medium} -gt 100 ]
                                        then
                                                echo "${PROGNAME} Syntax error: RESOLUTION MEDIUM value must be numeric and less than or equal to 100" >&2
                                                return 1
                                        fi
                                        shift 2
                        fi;;
		-c)
			if [ "X"$CONFIDENCE_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: CONFIDENCE already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires and argument" >&2
					return 1
				else
					CONFIDENCE_FLAG=1
					confidence=$2
					echo ${confidence} | grep "0\.[89][0-9]*" 2>&1 >/dev/null
					RESULT=$?
					if [ ${RESULT} != 0 ]
					then
						
						echo "${PROGNAME} Syntax error: CONFIDENCE value must be between 0.80 and 0.99" >&2
						return 1
					fi
					shift 2
			fi;;
		-S)
			if [ "X"$SET_AUTH_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: SET SESSION AUTH already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires and argument" >&2
					return 1
				else
					SET_AUTH_FLAG=1
					SET_AUTH_USER=$2
					shift 2
			fi;;
		o)
			if [ "X"$ANSI_USER_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: user flag already processed" >&2
			else
				ANSI_USER_FLAG=1
			fi
			shift
			;;
		-f)
			if [ "X"$FILTER_FLAG = "X1" ]	
			then
				echo "${PROGNAME} Syntax error: FILTER already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires and argument" >&2
					return 1
				else
					FILTER_FLAG=1
					case $2 in
					\"*)
						sel_filter="`echo $@ | cut -f2 -d'\"' | sed 's/--//'`"
						resto="`echo $* | cut -f3- -d'\"'`"
						;;
					*)
						echo "${PROGNAME} Syntax error: Argument for option $1 must be enclosed in quotes" >&2
						return 1
					esac
					if [ "X$resto" = "X" ]
					then
						return
					fi
					arg_ok='p:d:f:m:r:R:c:E:lePNVhTsyxXzZow:'
					set -- `getopt "${arg_ok}" $resto`
					continue
			fi;;
		*)
			if [ "X"$DATABASE_FLAG != "X1" ]	
			then
				DATABASE_FLAG=1
				dbserver=$1
				shift
				continue	
			fi
			echo "${PROGNAME}: Erro de sintaxe - "$1 >&2
			return 1;;
		esac
	done
}




#-----------------------------------------------------
# Start of script...
#-----------------------------------------------------

get_args $*
if [ $? != 0 ]
then
	echo "${PROGNAME} Error parsing parameters" >&2
	exit 1
fi

until [ ${dbserver} ]
do
  echo -n "Insert the database name: "
  read dbserver
  if [ -z "${dbserver}" ]
  then
    echo '>> You must enter a database name. <<'
    exit 1
  fi
done

#-----------------------------------------------------
# parameter validation
#-----------------------------------------------------
if [ "X${PRIORITY_FLAG}" = "X1" ]
then
	if [ ${priority} -lt 1 -o ${priority} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: PDQPRIORITY must be between 1 and 100" >&2
		exit 1
	fi
fi

if [ "X${RESOLUTION_MEDIUM_FLAG}" = "X1" ]
then
	echo ${resolution_medium} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_medium} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: RESOLUTION MEDIUM value must be numeric and less than or equal to 100" >&2
		exit 1
	else
		resolution_clause_medium="-r ${resolution_medium} "
	fi
fi

if [ "X${RESOLUTION_HIGH_FLAG}" = "X1" ]
then
	echo ${resolution_high} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_high} -gt 100 ]
	then
		echo "${PROGNAME} Syntax error: RESOLUTION HIGH value must be numeric and less than or equal to 100" >&2
		exit 1
	else
		resolution_clause_high=" -R ${resolution_high} "
	fi
fi

if [ "X"$SAMPLING_FLAG = "X1" ]
then
	echo ${sampling} | grep '^[0-9][0-9]*$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${sampling} -lt 1 ]
	then
		echo "${PROGNAME} Syntax error: SAMPLING value must be numeric and greater than 0" >&2
		exit 1
	else
		sampling_clause="-m ${sampling} "
	fi
fi

if [ "X${CONFIDENCE_FLAG}" = "X1" ]
then
	echo ${confidence} | grep "0\.[89][0-9]*" 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 ]
	then
		echo "${PROGNAME} Syntax error: CONFIDENCE must be between 0.80 and 0.99" >&2
		exit 1
	else
		confidence_clause="-c ${confidence} "
	fi
fi

if [ "X${QUICK_LOW_MODE_FLAG}" = "X1" ]
then
	low_mode_flag="-l "
fi

if [ "X"$PROCEDURES_FLAG = "X" ]
then
	if [ "X"$FILTER_FLAG != "X1" ]
	then
		PROCEDURES_FLAG=1
	else
		PROCEDURES_FLAG=0
	fi
fi

#-----------------------------------------------------
# Filename definitions
#-----------------------------------------------------
DBS_DATABASE_LOCK_FILE=/tmp/${PROGNAME}_${DATABASE}.lck
TABLE_LIST_FILE=/tmp/${PROGNAME}_$$_table_list
SQL_ERROR_FILE=/tmp/${PROGNAME}_$$_sql_error
SQL_OUTPUT_FILE=/tmp/${PROGNAME}_$$_sql_out
EXPLAIN_TMP_FILE=/tmp/${PROGNAME}_$$_tmp_explain

#-----------------------------------------------------
# Setting up cleanup
#-----------------------------------------------------
clean_up()
{
	rm -f ${DBS_DATABASE_LOCK_FILE} ${TABLE_LIST_FILE} ${SQL_ERROR_FILE} ${EXPLAIN_TMP_FILE} ${SQL_OUTPUT_FILE}
}

trap clean_up 0


#-----------------------------------------------------
# Check to see if only script for this database
#-----------------------------------------------------
if [ -r "${DBS_DATABASE_LOCK_FILE}*" ]
then
	if  [ "X${MULTIPLE_FLAG}" != "X1" ]
	then
		echo "There is another ${PROGNAME} running for the same database or there was an error on a previous executions">&2
		echo "Remove the file ${DBS_DATABASE_LOCK_FILE} or use the -y flag and try again" >&2
		exit 1
	else
		DBS_DATABASE_LOCK_FILE=/tmp/${PROGNAME}_${DATABASE}.lck_$$
	fi
fi
echo $$ > ${DBS_DATABASE_LOCK_FILE}

#-----------------------------------------------------
# Set up table filter
#-----------------------------------------------------
if [ "X${SYSTABLES_FLAG}" != "X1" ]
then
	sel_filter="t.tabid > 99 and t.tabtype = 'T' $sel_filter"
else
	sel_filter="t.tabname not like ' %' and t.tabtype = 'T' $sel_filter"
fi


#-----------------------------------------------------
# obtain table list
#-----------------------------------------------------
if [ "X$SET_AUTH_FLAG" = "X1" ]
then
	SET_AUTH_CLAUSE="SET SESSION AUTHORIZATION TO '${SET_AUTH_USER}';"
else
	SET_AUTH_CLAUSE=""
fi

LOGGING_FLAGS=`dbaccess sysmaster - <<EOSQL 2>${SQL_ERROR_FILE} | grep "LOGGING:" | awk '{print $NF}' 
SELECT 'LOGGING: '|| is_logging || is_ansi
FROM sysdatabases
WHERE name = '${dbserver}';
EOSQL
`

case "${LOGGING_FLAGS}" in
11|10|00)
	LOGGING_FLAG=`echo ${LOGGING_FLAGS} | cut -c1`
	ANSI_FLAG=`echo ${LOGGING_FLAGS} | cut -c2`
	;;
*)
	echo "${PROGNAME} Error: DBACCESS error trying to check database logging mode" >&2
	cat < ${SQL_ERROR_FILE} >&2
	exit 1
	;;
esac
	
	

dbaccess ${dbserver} - <<EOSQL 1>&2 2>${SQL_ERROR_FILE} 
${SET_AUTH_CLAUSE}
output to pipe "cat  | grep -v '^$' >${TABLE_LIST_FILE}" without headings
select trim(tabname) || ' ' ||trim(owner) from informix.systables t
where $sel_filter
order by 1;
EOSQL

if [ $? != 0  -o ! -r ${TABLE_LIST_FILE} ]
then
	echo "${PROGNAME} Error: DBACCESS error trying to fetch table list">&2
	cat < ${SQL_ERROR_FILE} >&2
	exit 1
fi

LINE_COUNT=`wc -l ${TABLE_LIST_FILE} | awk '{print $1}'`

if [ ${LINE_COUNT} = 0 ]
then
	echo "${PROGNAME} Error: There are no tables that match the search filter" >&2
	exit 0
fi


#-----------------------------------------------------
# Setting up tbl_updstats options
#-----------------------------------------------------
case  "X$EXPLAIN_FLAG" in
X1)
	CMD_FLAGS="-e "
	;;
X2)
	CMD_FLAGS="-E ${EXPLAIN_TMP_FILE} "
	;;
esac

if [ "X${PRIORITY_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -p ${priority}"
fi

if [ "X${TIMINGS_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -T"
fi

COMMENT_STRING="#"
if [ "X${CMD_DISPLAY_FLAG}" != "X" ]
then
	CMD_FLAGS="${CMD_FLAGS} ${CMD_DISPLAY_FLAG}"
	COMMENT_STRING="--"
fi

if [ "X$SET_AUTH_FLAG" = "X1" ]
then
        CMD_FLAGS="${CMD_FLAGS} -S ${SET_AUTH_USER}"
fi


if [ "X$ANSI_FLAG" = "X1" ]
then
        CMD_FLAGS="${CMD_FLAGS} -i -a"
else
	if [ "X$LOGGING_FLAG" = "X1" ]
	then
	        CMD_FLAGS="${CMD_FLAGS} -i"
	fi
fi

if [ "X${LOCK_MODE_FLAG}" = "X1" ]
then
	CMD_FLAGS="${CMD_FLAGS} -w ${LOCK_MODE_TIME}"
fi


#-----------------------------------------------------
# Launch/display or both...
#-----------------------------------------------------
while read tblname owner
do
	if [ "X$ANSI_USER_FLAG" = "X1" ]
	then
		ANSI_USER_CLAUSE="-o $owner "
	else
		ANSI_USER_CLAUSE=""
	fi

	echo "${COMMENT_STRING}${PROGNAME} Processing table ${dbserver}@${INFORMIXSERVER}:${tblname} at `date` ..."
	case "X${DISPLAY_FLAG}" in
	X1)
		#--- display only...
		echo "${COMMENT_STRING}Command: tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${CMD_FLAGS}"
		;;
	X2)
		#--- display and execute 
		echo "${COMMENT_STRING}Command: tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${CMD_FLAGS}"
		cat /dev/null >${EXPLAIN_TMP_FILE}
		tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${CMD_FLAGS}
		if [ "X${EXPLAIN_FLAG}" = "X1" ]
		then
			cat ${EXPLAIN_TMP_FILE} >>${explain_file}
		fi
		;;
	X*)
		#--- execute only
		cat /dev/null >${EXPLAIN_TMP_FILE}
		tbl_updstats -d ${dbserver} -t ${tblname} ${ANSI_USER_CLAUSE}${low_mode_flag}${resolution_clause_high}${sampling_clause}${resolution_clause_medium}${confidence_clause}${CMD_FLAGS}
		if [ "X${EXPLAIN_FLAG}" = "X2" ]
		then
			cat ${EXPLAIN_TMP_FILE} >>${explain_file}
		fi
		;;
	esac
done <${TABLE_LIST_FILE}

#-----------------------------------------------------
# handling procedures...
#-----------------------------------------------------
if [ "X"$PROCEDURES_FLAG = "X1" ]
then
	echo "${COMMENT_STRING}${PROGNAME} Processing procedures at `date` ..."
	case "X${EXPLAIN_FLAG}" in
	X1)
		EXPLAIN_CLAUSE="set explain on;"
		;;
	X2)
		EXPLAIN_CLAUSE="set explain file to '${explain_file}';"
		;;
	esac
	dbaccess ${dbserver} <<!EOF 2>${SQL_ERROR_FILE} 1>${SQL_OUTPUT_FILE}
${SET_AUTH_CLAUSE}
${EXPLAIN_CLAUSE}

update statistics for procedure;
!EOF

	if [ $? != 0 ]
	then
		echo "${PROGNAME} Error: dbaccess error while running update statistics for procedures">&2
		cat ${SQL_ERROR_FILE} >&2
		exit 1
	else
		cat ${SQL_OUTPUT_FILE}
	fi
fi
echo "${COMMENT_STRING}${PROGNAME} Ended at `date` ..."
