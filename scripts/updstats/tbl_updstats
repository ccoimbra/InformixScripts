#!/bin/sh
# Name: $RCSfile$
# CVS file: $Source$
# CVS id: $Header$
# Revision: $Revision$
# Revised on: $Date$
# Revised by: $Author$
# Support: Fernando Nunes - domusonline@domus.online.pt
# Script to create the 'update statisics' statements as discribed in the
# Performance Guide
# This script assumes all environment variables are set.


#-------------------------------------------------------
# parameter processing
#-------------------------------------------------------

PROGNAME=`basename $0`
VERSION=`echo "$Revision$" | cut -f2 -d' '`

DEFAULT_RESOLUTION_MEDIUM=2.5

# Do not ignore dbaccess errors
DBACCNOIGN=1
export DBACCNOIGN

DELIMIDENT=yes
export DELIMIDENT


show_help()
{
	echo "${PROGNAME}: -h | -V | { [-d] database } { [-t] table } [ -e | -E file ] [ -p priority ]\n [ -m size ] [ -r resolution ] [ -c confidence ] [ -R resolution ] [ -x|X ] [ -T ]" >&2
	echo "               { [ -d ] database } (required)" >&2
	echo "               { [-t] table}  (required)" >&2
	echo "               [-h] Show help and exit">&2
	echo "               [-V] Show version and exit" >&2
	echo "               [-p] Set PDQPRIORITY (versions >= 7.31.UD2 and 9.30.UC2)" >&2
	echo "               [-r resolution] Set resolution for MEDIUM distributions" >&2
	echo "               [-c confidence] Set confidence" >&2
	echo "               [-R resolution] Set resolution for HIGH distributions" >&2
	echo "               [-m size] Set sampling size (versions >= 11.10)" >&2
	echo "               [-e] Set explain on (versions >= 7.31.UD2 and 9.30.UC2)" >&2
	echo "               [-E file ] Set explain file (versions >= 11.10)" >&2
	echo "               [-X] Display and execute" >&2
	echo "               [-x] Display only. Don't execute" >&2
	echo "               [-T] Include timings in de SQL generated" >&2

}

get_args()
{
	arg_ok="d:t:p:m:r:R:c:E:heVTxX"
	list="$*"
	getopt ${arg_ok} $list >/dev/null 2>&1
	# check result of parsing                                                
	if [ $? != 0 ]
	then
		return 1
	fi
	set -- `getopt "${arg_ok}" $list`

	while [ $1 != -- ]
	do
		case $1 in
		-h)   # show help
			show_help
			exit 0
			;;
		-v)   # show version
			echo "${PROGNAME} version ${VERSION}"
			exit 0
			;;
		-T)   # show timings (to stdout)
			TIMINGS_FLAG=1
			;;
		-e)   # set up the -e (set explain flag)
			EXPLAIN_FLAG=1
			;;
		-E)   # set up the -e (set explain flag)
			EXPLAIN_FLAG=2
			explain_file=$2
			shift
			;;
		-x)   # set up the -x (set DISPLAY_ONLY flag)
			DISPLAY_FLAG=1
			;;
		-X)   # set up the -X (set DISPLAY_&_EXECUTE flag)
			DISPLAY_FLAG=2
			;;
		-d)   # set up the -d (database flag)
			DATABASE_FLAG=1
			DATABASE=$2
			shift
			;;
		-t)   # set up the -f (filter flag)
			TABLE_FLAG=1
			tabname=$2
			shift
			;;
		-p)   # set up the -p ( PDQPRIORITY flag)
			PRIORITY_FLAG=1
			priority=$2
			shift
			;;
		-m)   # set up the -m (sampling flag)
			SAMPLING_FLAG=1
			sampling=$2
			shift
			;;
		-R)   # set up the -R (resolution High flag)
			RESOLUTION_HIGH_FLAG=1
			resolution_high=$2
			shift
			;;
		-r)   # set up the -r (resolution medium flag)
			RESOLUTION_MEDIUM_FLAG=1
			resolution_medium=$2
			shift
			;;
		-c)   # set up the -c (confidence flag)
			CONFIDENCE_FLAG=1
			confidence=$2
			shift
			;;
		esac
		shift
	done
	shift   # skip double dash
	while [ $# -ge 1 ]
	do
		case $1 in
		-X)
			if [ "X"$DISPLAY_FLAG != "X" ]	
			then
				echo "${PROGNAME}: Syntax error: DISPLAY or DYSPLAY/EXECUTE already processed" >&2
				return 1
			else
				DISPLAY_FLAG=2
				shift
			fi
			;;
		-x)
			if [ "X"$DISPLAY_FLAG != "X" ]	
			then
				echo "${PROGNAME}: Syntax error: DISPLAY or DYSPLAY/EXECUTE already processed" >&2
				return 1
			else
				DISPLAY_FLAG=1
				shift
			fi;;
		-E)
			if [ "X"$EXPLAIN_FLAG != "X" ]	
			then
				echo "${PROGNAME}: Syntax error: SET EXPLAIN already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					EXPLAIN_FLAG=2
					explain_file=$2
					shift 2
			fi
			;;
		-T)
			if [ "X"$TIMINGS_FLAG = "X1" ]	
			then
				echo "${PROGNAME}: Syntax error: TIMINGS already processed" >&2
				return 1
			else
				TIMINGS_FLAG=1
				shift
			fi;;
		-e)
			if [ "X"$EXPLAIN_FLAG != "X" ]	
			then
				echo "${PROGNAME}: Syntax error: SET EXPLAIN already processed" >&2
				return 1
			else
				EXPLAIN_FLAG=1
				shift
			fi;;
		-h)   # show help
			show_help
			exit 0
			;;
		-v)   # show version
			echo "${PROGNAME} version ${VERSION}"
			exit 0
			;;
		-d)
			if [ "X"$DATABASE_FLAG = "X1" ]	
			then
				echo "Syntax error: DATABASE already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					DATABASE_FLAG=1
					DATABASE=$2
					shift 2
			fi;;
		-t)
			if [ "X"$TABLE_FLAG = "X1" ]	
			then
				echo "Syntax error: TABLE already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					TABLE_FLAG=1
					tabname=$2
					shift 2
			fi;;
		-p)
			if [ "X"$PRIORITY_FLAG = "X1" ]	
			then
				echo "Syntax error: PRIORITY already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					PRIORITY_FLAG=1
					priority=$2
					if [ ${priority} -lt 1 -o ${priority} -gt 100 ]
					then
						echo "Error: PDQPRIORITY value must be between 0 and 100" >&2
						return 1
					fi
					shift 2
			fi;;
		-m)
			if [ "X"$SAMPLING_FLAG = "X1" ]
			then
				echo "${PROGNAME} Syntax error: SAMPLING already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "${PROGNAME} Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					SAMPLING_FLAG=1
					sampling=$2
					echo ${sampling} | grep '^[0-9][0-9]*$' 2>&1 >/dev/null
					RESULT=$?
					if [ ${RESULT} != 0 -o ${sampling} -lt 1 ]
					then
						echo "${PROGNAME} Syntax error: SAMPLING value must be numeric and greater than 0" >&2
						return 1
					fi
					shift 2
                        fi;;
		-R)
			if [ "X"$RESOLUTION_HIGH_FLAG = "X1" ]
			then
				echo "Syntax error: RESOLUTION HIGH already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					RESOLUTION_HIGH_FLAG=1
                                        resolution_high=$2
					echo ${resolution_high} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
					RESULT=$?
                                        if [ ${RESULT} != 0 -o ${resolution_high} -gt 100 ]
                                        then
                                                echo "Error: Resolution for HIGH distributions value must be numeric and less than or equal to 100" >&2
                                                return 1
                                        fi
                                        shift 2
                        fi;;
		-r)
			if [ "X"$RESOLUTION_MEDIUM_FLAG = "X1" ]
			then
				echo "Syntax error: RESOLUTION MEDIUM already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					RESOLUTION_MEDIUM_FLAG=1
                                        resolution_medium=$2
					echo ${resolution_medium} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
					RESULT=$?
                                        if [ ${RESULT} != 0 -o ${resolution_medium} -gt 100 ]
                                        then
                                                echo "Error: Resolution for MEDIUM distributions value must be numeric and less than or equal to 100" >&2
                                                return 1
                                        fi
                                        shift 2
                        fi;;
		-c)
			if [ "X"$CONFIDENCE_FLAG = "X1" ]
			then
				echo "Syntax error: CONFIDENCE already processed" >&2
				return 1
			elif [ $# -le 1 ]
				then
					echo "Syntax error: Option $1 requires an argument" >&2
					return 1
				else
					CONFIDENCE_FLAG=1
					confidence=$2
					echo ${confidence} | grep "0\.[89][0-9]*" 2>&1 >/dev/null
					RESULT=$?
					if [ ${RESULT} != 0 ]
					then
						
						echo "Error: CONFIDENCE value must be between 0.80 and 0.99" >&2
						return 1
				fi
				shift 2
			fi;;
		*)
			if [ "X"$DATABASE_FLAG != "X1" ]	
			then
				DATABASE_FLAG=1
				DATABASE=$1
				shift
				continue	
			fi
			if [ "X"$TABLE_FLAG != "X1" ]	
			then
				TABLE_FLAG=1
				tabname=$1
				shift
				continue	
			fi
			echo "${PROGNAME}: Syntax error: $1" >&2
			return 1;;
		esac
	done
}






#--------------------------------------------------------
# script start...
#--------------------------------------------------------

get_args $*
if [ $? != 0 ]
then
	echo "Error parsing parameters" >&2
	exit 1
fi

until [ ${DATABASE} ]
do
  echo -n "What is the database name?: "
  read DATABASE
done
 
until [ ${tabname} ]
do
  echo -n "What is the table name?: "
  read tabname
done
 
#--------------------------------------------------------
# Check parameter values...
#--------------------------------------------------------
if [ "X${PRIORITY_FLAG}" = "X1" ]
then
	if [ 1 -gt ${priority}  -o  ${priority} -gt 100 ]
	then
		echo "Error: PDQPRIORITY must be between 0 and 100" >&2
		exit 1
	fi
fi

if [ "X${RESOLUTION_MEDIUM_FLAG}" = "X1" ]
then
	echo ${resolution_medium} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_medium} -gt 100 ]
	then
		echo "Error: RESOLUTION MEDIUM value must be numeric and less than or equal to 100" >&2
		exit 1
	fi
fi
 
if [ "X${RESOLUTION_HIGH_FLAG}" = "X1" ]
then
	echo ${resolution_high} | grep '^[0-9]\{0,3\}\.\{0,1\}[0-9]\{1,\}$' 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 -o ${resolution_high} -gt 100 ]
	then
		echo "Error: RESOLUTION HIGH value must be numeric and less than or equal to 100" >&2
		exit 1
	fi
fi

if [ "X${CONFIDENCE_FLAG}" = "X1" ]
then
	echo ${confidence} | grep "0\.[89][0-9]*" 2>&1 >/dev/null
	RESULT=$?
	if [ ${RESULT} != 0 ]
	then
		echo "Error: CONFIDENCE must be between 0.80 and 0.99" >&2
		exit 1
	fi
fi
#--------------------------------------------------------
# define filenames using process id
#--------------------------------------------------------
SQL_FILE=/tmp/${PROGNAME}$$.sql
IDX_HEADER_COLUMNS_FILE=/tmp/${PROGNAME}_$$.idx_header
NONINDEX_HEADER_COLUMNS_FILE=/tmp/${PROGNAME}_$$.non_idx
INDEXED_COLUMNS_FILE=/tmp/${PROGNAME}_$$.idx
SQL_ERROR_FILE=/tmp/${PROGNAME}_$$.sqlerror
SQL_OUTPUT_FILE=/tmp/${PROGNAME}_$$.sqlout

#--------------------------------------------------------
# setup function for cleaning up on exit
#--------------------------------------------------------
clean_up()
{
	rm -f ${SQL_FILE} ${IDX_HEADER_COLUMNS_FILE} ${INDEXED_COLUMNS_FILE} ${NONINDEX_HEADER_COLUMNS_FILE} ${SQL_ERROR_FILE} ${SQL_OUTPUT_FILE}
}
trap clean_up 0
 

#--------------------------------------------------------
# get the aux column files...
#--------------------------------------------------------
dbaccess ${DATABASE} 1>/dev/null 2>${SQL_ERROR_FILE} <<EOSQL
-------------------------------------------------------
-- find the index header columns
-------------------------------------------------------
unload to ${IDX_HEADER_COLUMNS_FILE} delimiter ' '
select unique trim(colname)
from systables t, sysindexes i, syscolumns c
where tabname = '${tabname}' 
and t.tabid = i.tabid
and t.tabid = c.tabid
and colno = part1 
order by 1;

--------------------------------------------------------
-- find all the non index header columns
--------------------------------------------------------
unload to ${NONINDEX_HEADER_COLUMNS_FILE} delimiter ' '
select unique trim(colname)
from syscolumns c, systables t
where c.tabid = t.tabid
and t.tabname = '${tabname}'
and c.colno not in ( select i.part1 from sysindexes i where i.tabid = t.tabid)
order by 1;

--------------------------------------------------------
-- find the indexed columns
--------------------------------------------------------
unload to ${INDEXED_COLUMNS_FILE} delimiter ' '
select unique trim(colname)
from syscolumns c, systables t
where c.tabid = t.tabid
and t.tabname = '${tabname}'
and c.colno in (
         select i.part1 from sysindexes i where i.tabid = t.tabid UNION
         select i.part2 from sysindexes i where i.tabid = t.tabid UNION
         select i.part3 from sysindexes i where i.tabid = t.tabid UNION
         select i.part4 from sysindexes i where i.tabid = t.tabid UNION
         select i.part5 from sysindexes i where i.tabid = t.tabid UNION
         select i.part6 from sysindexes i where i.tabid = t.tabid UNION
         select i.part7 from sysindexes i where i.tabid = t.tabid UNION
         select i.part8 from sysindexes i where i.tabid = t.tabid UNION
         select i.part9 from sysindexes i where i.tabid = t.tabid UNION
         select i.part10 from sysindexes i where i.tabid = t.tabid UNION
         select i.part11 from sysindexes i where i.tabid = t.tabid UNION
         select i.part12 from sysindexes i where i.tabid = t.tabid UNION
         select i.part13 from sysindexes i where i.tabid = t.tabid UNION
         select i.part14 from sysindexes i where i.tabid = t.tabid UNION
         select i.part15 from sysindexes i where i.tabid = t.tabid UNION
         select i.part16 from sysindexes i where i.tabid = t.tabid
)
order by 1;
EOSQL

if [ $? != 0 ]
then
	printf "${PROGNAME} Error: dbaccess error when fetching column information for table ${DATABASE}@${INFORMIXSERVER}:${tabname}\n">&2
	cat ${SQL_ERROR_FILE} >&2
	exit 1
fi

#--------------------------------------------------------
# start the SQL script preparation
#--------------------------------------------------------
echo > ${SQL_FILE}
printf "\n-- Update statistics for table ${DATABASE}@${INFORMIXSERVER}:${tabname}\n-- Generated by ${PROGNAME} ${VERSION} on `date` \n\n" >>${SQL_FILE}

if [ "X${TIMINGS_FLAG}" = "X1" ]
then
	printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} Start: '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
fi

if [ "X${EXPLAIN_FLAG}" = "X1" ]
then
	printf "\n-- Obtain statistics\nset explain on;\n" >>${SQL_FILE}
else
	if [ "X${EXPLAIN_FLAG}" = "X2" ]
	then
		printf "\n-- Obtain statistics\nset explain file to '${explain_file}';\n" >>${SQL_FILE}
	fi
fi
if [ "X"${PRIORITY_FLAG} = "X1" ]
then
	printf "\n-- Set PDQPRIORITY\nset pdqpriority ${priority};\n" >>${SQL_FILE}
fi

#-------------------------------------------------------
# Create sql statements for medium distributions 
#-------------------------------------------------------

LINE_COUNT=`wc -l ${NONINDEX_HEADER_COLUMNS_FILE} | awk '{print $1}'`

if [ "X${LINE_COUNT}" != "X0" ]
then
	if [ "X${RESOLUTION_MEDIUM_FLAG}" = "X1" -o "X${CONFIDENCE_FLAG}" = "X1" -o "X${SAMPLING_SIZE}" = "X1" ]
	then
		if [ "X${SAMPLING_FLAG}" = "X1" ]
		then
			sampling_clause=" sampling size ${sampling} "
		else
			sampling_clause=""
		fi

		if [ "X${RESOLUTION_MEDIUM_FLAG}" != "X1" ]
		then
			resolution_clause_medium=" resolution ${DEFAULT_RESOLUTION_MEDIUM} ${confidence} "
		else
			resolution_clause_medium=" resolution ${resolution_medium} ${confidence} "
		fi
	fi
	if [ "X${TIMINGS_FLAG}" = "X1" ]
	then
		printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} Medium : '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
	fi

	printf "\n-- MEDIUM distributions only for all columns that are not head of any index\nupdate statistics medium for table \"${tabname}\"\n    (" >>${SQL_FILE}
	FIRST=1
	while read COLNAME
	do
		if [ $FIRST = 1 ]
		then
			printf "%s" ${COLNAME} >> ${SQL_FILE}
			FIRST=0
		else
			printf ",%s" ${COLNAME} >>${SQL_FILE}
		fi
	done < ${NONINDEX_HEADER_COLUMNS_FILE}
	printf  ")\n${sampling_clause}${resolution_clause_medium} distributions only;\n" >>${SQL_FILE}
fi
 
#-------------------------------------------------------
# Create sql statements for high distributions
#-------------------------------------------------------

LINE_COUNT=`wc -l ${IDX_HEADER_COLUMNS_FILE} | awk '{print $1}'`
if [ "X${LINE_COUNT}" != "X0" ]
then
	if [ "X${RESOLUTION_HIGH_FLAG}" = "X1" ]
	then
		resolution_clause_high=" resolution ${resolution_high} "
	fi
	if [ "X${TIMINGS_FLAG}" = "X1" ]
	then
		printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} High: '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
	fi

	printf  "\n-- HIGH distributions only for all columns that are head of any index\nupdate statistics high for table \"${tabname}\"\n    (" >>${SQL_FILE}
	FIRST=1
	while read COLNAME
	do
		if [ $FIRST = 1 ]
		then
			printf "%s" ${COLNAME} >> ${SQL_FILE}
			FIRST=0
		else
			printf ",%s" ${COLNAME} >>${SQL_FILE}
		fi
	done <${IDX_HEADER_COLUMNS_FILE}
	printf ")\n${resolution_clause_high} distributions only;\n" >>${SQL_FILE}
fi
 
#-------------------------------------------------------
# Create sql statements for low 
#-------------------------------------------------------
LINE_COUNT=`wc -l ${INDEXED_COLUMNS_FILE} | awk '{print $1}'`
if [ "X${LINE_COUNT}" != "X0" ]
then
	if [ "X${TIMINGS_FLAG}" = "X1" ]
	then
		printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} Low: '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
	fi

	printf  "\n-- LOW for all columns beloging to any index\nupdate statistics low for table \"${tabname}\"\n    (" >>${SQL_FILE}
	FIRST=1
	while read COLNAME
	do
		if [ $FIRST = 1 ]
		then
			printf "%s" ${COLNAME} >> ${SQL_FILE}
			FIRST=0
		else
			printf ",%s" ${COLNAME} >>${SQL_FILE}
		fi
	done <${INDEXED_COLUMNS_FILE}
	printf ");\n\n" >>${SQL_FILE}
else
	if [ "X${TIMINGS_FLAG}" = "X1" ]
	then
		printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} Low: '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
	fi
	printf "\n-- LOW for table if table has no indexes\nupdate statistics low for table \"${tabname}\";\n\n" >>${SQL_FILE}
fi

if [ "X${TIMINGS_FLAG}" = "X1" ]
then
printf "\n-- Show stats timings\noutput to pipe 'cat -u' without headings select '${DATABASE}@${INFORMIXSERVER}:${tabname} End: '||current year to fraction from systables where tabid = 1;\n" >>${SQL_FILE}
fi


#-------------------------------------------------------
# Execute SQL instructions
#-------------------------------------------------------
case X${DISPLAY_FLAG} in
X1)
	cat ${SQL_FILE}
	;;
X2)
	cat ${SQL_FILE}
	dbaccess ${DATABASE} - <${SQL_FILE} 2>${SQL_ERROR_FILE} 1>${SQL_OUTPUT_FILE}
	if [ $? != 0 ]
	then
		printf "${PROGNAME} Error: dbaccess error when executing SQL with update statistics statements: ${tabname}@${DATABASE}\n">&2
		cat ${SQL_ERROR_FILE} >&2
		exit 1
	fi
	cat ${SQL_OUTPUT_FILE} | grep -v "^[ 	]*$"
	;;
X*)
	dbaccess ${DATABASE} - <${SQL_FILE} 2>${SQL_ERROR_FILE} 1>${SQL_OUTPUT_FILE}
	if [ $? != 0 ]
	then
		printf "${PROGNAME} Error: dbaccess error when executing SQL with update statistics statements: ${tabname}@${DATABASE}\n">&2
		cat ${SQL_ERROR_FILE} >&2
		exit 1
	fi
	cat ${SQL_OUTPUT_FILE} | grep -v "^[ 	]*$"
	;;
esac
