#!/bin/ksh
# Copyright (c) 2005-2016 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision 2.0.1 $
# $Date 2016-02-22 02:38:48$
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

#-------------------------------------------------------
# show script usage
#-------------------------------------------------------

show_help()
{
	echo
        printf "${PROGNAME}: [-h] \n"
	printf "${PROGNAME}: [-V] \n"
	printf "${PROGNAME}: [-l log] [ -v ] | \n[ -D <dbname> ]  < -i instance id | -I <INFORMIXSERVER> -H <HOSTANME> | -G <Group Name> >\n[ -d <days>\%<HH>:<mm>:<ss> ] [ -s <start time> ] [ -S <stop time> ] [ -x ] [ -f unload_file ]\n"
	echo
	echo "    -h              : this help"
	echo "    -V              : script version"
	echo "    -v              : Verbose mode (for AWK processing of the online.log)"
	echo "    -l <log>        : alternative log file"
	echo "    -d <downtime>   : to indicate machine downtime"
	echo "    -s <start time> : to indicate the time at which processing should start (%Y%m%d)"
	echo "    -S <stop time>  : to indicate the time at which processing should stop (%Y%m%d)"
	echo "    -x              : to force extending the last date collected to the current date/time"
	echo "    -f <unload_file>: file to unload ONLINE and OFFLINE intervals"
	echo "    -D <IXMON db>   : Name of the IXMon database"
	echo "    -i instance_id  : Instance Id of the database"
	echo "    -I INFORMIX SRV : INFORMIXSERVER of the instance"
	echo "    -H HOSTNAME     : Hostname/Machine of the instance"
	echo "    -G Group Name   : Group name in the IXMon database"
	echo
	echo "EXs:	${PROGNAME} -l /usr/informix/logs/db.log -d 0%08:32:00 -s 20060701 -S 20060701"
	echo "		${PROGNAME} -D ixmon -I ol_server -H host -d 0%08:32:00 -s 20060701 -S 20060701"
	echo
}

#-------------------------------------------------------
# parameter processing
#-------------------------------------------------------
get_args()
{
	USE_IXMON_FLAG=0
	arg_ok="l:d:s:S:f:xhvVi:I:H:G:D:"
	while getopts ${arg_ok} OPTION
	do
		case ${OPTION} in
		h)   # show help
			show_help
                        exit 0
                        ;;
		V)      #show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
			;;
		v)   # Verbose
			if [ "X${USE_IXMON_FLAG}" != "X0" ]
			then
				printf "${PROGNAME}: Syntax error - Option -v cannot be used with -D, -i, -I , -H nor -G\n" >&2
				return 1
			else
				VERBOSE_FLAG=1
			fi
			;;
		l)   # log file
			if [ "X${IXMON_DATABASE_FLAG}" != "X" -o "X${IXMON_INSTANCE_ID_FLAG}" != "X" -o "X${IXMON_INFORMIXSERVER_FLAG}" != "X" -o "X${IXMON_HOSTNAME_FLAG}" != "X" -o "X${IXMON_GROUP_FLAG}" != "X" ]
			then
				printf "${PROGNAME}: Syntax error - Options -D, -i, -I , -H and -G cannot be used with -l\n" >&2
				return 1
			else
				LOG_FILE_FLAG=1
				LOG_FILE=$OPTARG
				USE_IXMON_FLAG=0
			fi
			;;
		D)   # IXMon database
			if [ "X${LOG_FILE_FLAG}" != "X" -o "X${VERBOSE_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Options -l and -v  cannot be used with -D\n" >&2
				return 1
			else
				IXMON_DATABASE_FLAG=1
				IXMON_DATABASE=$OPTARG
				USE_IXMON_FLAG=`expr 10000 + $USE_IXMON_FLAG`
			fi
			;;
		i)   # Instance_id
			if [ "X${LOG_FILE_FLAG}" != "X" -o "X${IXMON_INFORMIXSERVER_FLAG}" != "X" -o "X${IXMON_HOSTNAME_FLAG}" != "X" -o "X${IXMON_GROUP_FLAG}" != "X" -o "X${VERBOSE_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Options -l, -v, -I , -H and -G cannot be used with -i\n" >&2
				return 1
			else
				IXMON_INSTANCE_ID_FLAG=1
				IXMON_INSTANCE_ID=$OPTARG
				USE_IXMON_FLAG=`expr 01000 + $USE_IXMON_FLAG`
				echo $IXMON_INSTANCE_ID | grep '^[0-9][0-9]*$' >/dev/null
				if [ $? != 0 ]
				then
					printf "${PROGNAME}: Syntax error - Invalid Instance ID ($IXMON_INSTANCE_ID)\n" >&2
					return 1
				fi
			fi
			;;
		I)   # Informix Server
			if [ "X${LOG_FILE_FLAG}" != "X" -o "X${IXMON_INSTANCE_ID_FLAG}" != "X" -o "X${IXMON_GROUP_FLAG}" != "X" -o "X${VERBOSE_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Options -l, -v, -i and -G cannot be used with -I\n" >&2
				return 1
			else
				IXMON_INFORMIXSERVER_FLAG=1
				IXMON_INFORMIXSERVER=$OPTARG
				USE_IXMON_FLAG=`expr 00100 + $USE_IXMON_FLAG`
			fi
			;;
		H)   # Hostname
			if [ "X${LOG_FILE_FLAG}" != "X" -o "X${IXMON_INSTANCE_ID_FLAG}" != "X" -o "X${IXMON_GROUP_FLAG}" != "X" -o "X${VERBOSE_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Options -l, -v, -i and -G cannot be used with -I\n" >&2
				return 1
			else
				IXMON_HOSTNAME_FLAG=1
				IXMON_HOSTNAME=$OPTARG
				USE_IXMON_FLAG=`expr 00010 + $USE_IXMON_FLAG`
			fi
			;;
		G)   # Group Name
			if [ "X${LOG_FILE_FLAG}" != "X" -o "X${IXMON_INSTANCE_ID_FLAG}" != "X" -o "X${IXMON_HOSTNAME_FLAG}" != "X" -o "X${VERBOSE_FLAG}" = "X1" -o "X${MACHINE_DOWNTIME_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Options -l, -v, -i, -I and -H cannot be used with -G\n" >&2
				return 1
			else
				IXMON_GROUP_FLAG=1
				IXMON_GROUP=$OPTARG
				USE_IXMON_FLAG=`expr 00001 + $USE_IXMON_FLAG`
			fi
			;;
                d)   # Machine Downtime
			if [ "X${IXMON_GROUP_FLAG}" = "X1" ]
			then
				printf "${PROGNAME}: Syntax error - Option -d cannot be used with -G\n" >&2
				return 1
			else
				MACHINE_DOWNTIME_FLAG=1
				MACHINE_DOWNTIME=$OPTARG
			fi
			;;
		s)   # start time
			START_TIME_FLAG=1
			START_TIME=$OPTARG
			;;
		S)   # stop time
			STOP_TIME_FLAG=1
			STOP_TIME=$OPTARG
			;;
		x)   # extend the time to the current one...
			EXTEND_TIME_FLAG=1
			;;
		f)   # unload file
			UNLOAD_FILE_FLAG=1
			UNLOAD_FILE=$OPTARG
			;;
		?)      # Error in the parsing of getopts
			printf "${PROGNAME}: Syntax error - Invalid argument ($OPTION)\n" >&2
			return 1
			;;
		esac
	done
}

#-------------------------------------------------------
# Clean up temporary files
#-------------------------------------------------------

cleanup()
{
	rm -f $OFFLINE_FILE $ONLINE_FILE
}

#-------------------------------------------------------
# Obtain uptime stats for a single instance
# Can use files (log) or IXMon database
#-------------------------------------------------------

process_instance()
{
#dbaccess -e $MYDATABASE <<EOF #2>>/dev/null
dbaccess $MYDATABASE <<EOF 2>>/dev/null


create temp table offline
(
        ini datetime year to second,
        fim datetime year to second
) with no log;
--INSERT INTO offline SELECT start_period, last_check FROM instance_uptime WHERE instance_id = $IXMON_INSTANCE_ID and mode IN (0);
$LOAD_OFFLINE

delete from offline where ini < extend(to_date("$START_TIME","%Y%m%d"), year to second) and fim < extend(to_date("$START_TIME","%Y%m%d"), year to second);
delete from offline where ini > extend(to_date("$STOP_TIME","%Y%m%d"), year to second) and fim > extend(to_date("$STOP_TIME","%Y%m%d"), year to second);

-- select "ofline",* from offline;
update offline set ini = extend(to_date("$START_TIME","%Y%m%d"), year to second)
where ini < extend(to_date("$START_TIME","%Y%m%d"), year to second) and fim >=extend(to_date("$START_TIME","%Y%m%d"), year to second);

update offline set fim = extend(to_date("$STOP_TIME","%Y%m%d")+ 1 UNITS DAY -1 UNITS SECOND, year to second)
where ini <= extend(to_date("$STOP_TIME","%Y%m%d"), year to second) and fim >=extend(to_date("$STOP_TIME","%Y%m%d"), year to second);

-- select "ofline",* from offline;
create temp table online
(
        ini datetime year to second,
        fim datetime year to second
) with no log;

$LOAD_ONLINE
delete from online where ini < extend(to_date("$START_TIME","%Y%m%d")) and fim < extend(to_date("$START_TIME","%Y%m%d"));
delete from online where ini > extend(to_date("$STOP_TIME","%Y%m%d")) and fim > extend(to_date("$STOP_TIME","%Y%m%d"));
-- select "online",* from online;

update online set ini = extend(to_date("$START_TIME","%Y%m%d"), year to second)
where ini < extend(to_date("$START_TIME","%Y%m%d"), year to second) and fim >=extend(to_date("$START_TIME","%Y%m%d"), year to second);

update online set fim = extend(to_date("$STOP_TIME","%Y%m%d")+ 1 UNITS DAY -1 UNITS SECOND, year to second)
where ini <= extend(to_date("$STOP_TIME","%Y%m%d"), year to second) and fim >=extend(to_date("$STOP_TIME","%Y%m%d"), year to second);
-- select "online",* from online;
create temp table gaps
(
        tstamp datetime year to second
) with no log;

insert into gaps
select min(ini) from offline;
insert into gaps
select min(ini) from online;

insert into gaps
select max(fim) from offline;
insert into gaps
select max(fim) from online;

create temp table aux_table
(
	inicio datetime year to second,
	fim    datetime year to second,
	dias   char(200),
	offline char(200),
	online char(200),
	machine_off char(200),
	dias_online char(200)
) with no log;
insert into aux_table
select (select min(tstamp) from gaps) inicio, (select max(tstamp) from gaps) fim, (select max(tstamp)-min(tstamp) from gaps) ndias, ( select sum(fim - ini) offline from offline) offline, ( select sum(fim - ini) online from online) online, "${MACHINE_DOWNTIME}", ""
from systables
where tabid = 1;

select
	lpad(trim(inicio||""),25) Start, lpad(trim(fim||""),25) End, lpad(trim(dias),25) days, lpad(trim(machine_off),25) hardware_offline, lpad(trim(offline),25) bd_offline, lpad(trim(online),25) bd_online,
	lpad(trunc(
	(
		(
 		substr(trim(online),1,length(trim(online)) - 8)	 -- Dias
		* 86400                                          -- Segundos
		)
		+
		(
		substr(trim(online), length(trim(online)) - 7,2) -- Horas
		* 3600
		)
		+
		(
		substr(trim(online), length(trim(online)) - 4,2) -- Minutos
		* 60                                            -- Segundos
		)
		+
		(
		substr(trim(online), length(trim(online)) - 1,2) -- Segundos
		)
	)
	* 100 /
	(
	(
		(
 		substr(trim(dias),1,length(trim(dias)) - 8)	 -- Dias
		* 86400                                          -- Segundos
		)
		+
		(
		substr(trim(dias), length(trim(dias)) - 7,2) -- Horas
		* 3600
		)
		+
		(
		substr(trim(dias), length(trim(dias)) - 4,2) -- Minutos
		* 60                                            -- Segundos
		)
		+
		(
		substr(trim(dias), length(trim(dias)) - 1,2) -- Segundos
		)
	)

		-
	(

		(
 		substr(trim(machine_off),1,length(trim(machine_off)) - 8)	 -- Dias
		* 86400                                          -- Segundos
		)
		+
		(
		substr(trim(machine_off), length(trim(machine_off)) - 7,2) -- Horas
		* 3600
		)
		+
		(
		substr(trim(machine_off), length(trim(machine_off)) - 4,2) -- Minutos
		* 60                                            -- Segundos
		)
		+
		(
		substr(trim(machine_off), length(trim(machine_off)) - 1,2) -- Segundos
		)
	)
	)
	,5),25) uptime_percent
from
	aux_table;

!printf "\n\n"
$UNLOAD_STMT

EOF


if [ "X${USE_IXMON_FLAG}" = "X0" -a "X${UNLOAD_FILE_FLAG}" = "X1" ]
then
	cat ${ONLINE_FILE} | awk -F'|' '{print "|Online|"$1"|"$2"||"}' >${UNLOAD_FILE}
	cat ${OFFLINE_FILE} | awk -F'|' '{print "|Offline|"$1"|"$2"||"}' >>${UNLOAD_FILE}
fi
}


#INIT



PROGNAME=`basename $0`
VERSION=`echo "$Revision 2.0.1 $" | cut -f2 -d' '`
OFFLINE_FILE=/tmp/ixuptime_offline_$$.unl
ONLINE_FILE=/tmp/ixuptime_online_$$.unl
trap cleanup 0


SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
sunos*)
	AWK=nawk
	PS_CMD="ps -o \"time,comm\""
	;;
osf*)
	PS_CMD="ps -o \"time,cmd\""
	AWK=nawk
	;;
hp-ux)
	PS_CMD="export UNIX_STD=2003;ps -o \"time,comm\""
	AWK=gawk
	;;
linux|*)
	PS_CMD="ps -o \"time,cmd\""
	AWK=gawk
	;;
esac



# FIX: This is needed in Solaris to use more compatible commands
if [ -d /usr/xpg4/bin ]
then
	PATH=/usr/xpg4/bin:$PATH
	export PATH
fi

get_args $*
if [ $? != 0 ]
then
        show_help >&2
        exit 1
fi



#----- Machine Downtime ------------------------------------

if [ "X"${MACHINE_DOWNTIME_FLAG} = "X1" ]
then
	echo ${MACHINE_DOWNTIME} | grep -E "^[0-9]{1,3}%[0-2][0-9]:[0-5][0-9]:[0-5][0-9]" >/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "${PROGNAME}: Error - Invalid format for machine downtime ( ${MACHINE_DOWNTIME} )" >&2
		exit 1
	fi
	MACHINE_DOWNTIME=`echo ${MACHINE_DOWNTIME} | sed 's/%/ /'`
else
	MACHINE_DOWNTIME="0 00:00:00"
fi

#----- Start time ------------------------------------------

if [ "X${START_TIME_FLAG}" = "X1" ]
then
	echo ${START_TIME} | grep -E "^[0-9]{8}$" >/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "${PROGNAME}: Error: Invalid format for start time ( ${START_TIME} )" >&2
		exit 1
	fi
else
	START_TIME=19000101
fi

#----- Stop time ------------------------------------------

if [ "X${STOP_TIME_FLAG}" = "X1" ]
then
	echo ${STOP_TIME} | grep -E "^[0-9]{8}$" >/dev/null 2>/dev/null
	if [ $? != 0 ]
	then
		echo "${PROGNAME}: Error: Invalid format for stop time ( ${START_TIME} )" >&2
		exit 1
	else
		if [ "X${START_TIME_FLAG}" = "X1" ]
		then
			if [ ${STOP_TIME} -le ${START_TIME} ]
			then
				echo "${PROGNAME}: Error: Stop time must be greater than start time" >&2
				exit 1
			fi
		fi
	fi
else
	STOP_TIME=30000101
fi
#----- Verbose flag ----------------------------------------

if [ "X"${VERBOSE_FLAG} = "X" ]
then
	VERBOSE_FLAG=0
fi


if [ "X${LOG_FILE_FLAG}" != "X1" -a "X${USE_IXMON_FLAG}" = "X0" ]
then
	which onstat | grep "^no onstat" >/dev/null 2>/dev/null
	if [ $? = 0 ]
	then
		echo "${PROGNAME}: Error - Log file not specified and onstat not available" >&2
		exit 1
	fi

	LOG_FILE=`onstat -m | grep "^Message Log File" | cut -f2 -d':'`

	if [ $? != 0 ]
	then
		echo "${PROGNAME}: Error - Log file not specified and unable to get it with onstat" >&2
		exit 1
	else
		# Check to see if online.log has dates on it or not...
		tail -100 /usr/informix/logs/bigbrother/bigbrother.log | grep "Checkpoint Completed" | head -1 | grep "^[0-9][0-9]/[0-9][0-9]/[0-9][0-9] " >/dev/null
		if [ $? = 0 ]
		then
			ONLINE_LOG_HAS_DATE=1
		else
			ONLINE_LOG_HAS_DATE=0
		fi
	fi
fi

#-----------------------------------------------------------
# Validate environment
#-----------------------------------------------------------

SCRIPT_DIR=`dirname $0`
AWK_FILE=${SCRIPT_DIR}/ixuptime.awk	
EXCLUSION_FILE=${SCRIPT_DIR}/ixuptime_neg_patt.txt

if [ "X${USE_IXMON_FLAG}" = "X0" ]
then
	#----- exclusion file --------------------------------------
	if [ ! -r  ${EXCLUSION_FILE} ]
	then
		echo "${PROGNAME}: Error - Cannot read pattern exclusion file ( ${EXCLUSION_FILE} )" >&2
		exit 1
	fi
	#----- AWK file       --------------------------------------
	if [ ! -r  ${AWK_FILE} ]
	then
		echo "${PROGNAME}: Error - Cannot read AWK file ( ${AWK_FILE} )" >&2
		exit 1
	fi
fi


if [ "X${EXTEND_TIME_FLAG}" = "X1" ]
then
	CURRENT_DATE=`date +"%Y-%m-%d"`
	CURRENT_HOUR=`date +"%H:%M:%S"`
else
	CURRENT_DATE="X"
	CURRENT_HOUR="X"
fi

if [ "X${IXMON_DATABASE_FLAG}" != "X1" ]
then
	IXMON_DATABASE=ixmon_tst
fi

if [ "X${USE_IXMON_FLAG}" = "X0" ]
then
	cat ${LOG_FILE} | grep -v -f ${EXCLUSION_FILE} | ${AWK} -v "ONLINE_LOG_HAS_DATE=${ONLINE_LOG_HAS_DATE}" -v "VERBOSE_FLAG=${VERBOSE_FLAG}" -v "OFFLINE_FILE=${OFFLINE_FILE}" -v "ONLINE_FILE=${ONLINE_FILE}" -v "CURRENT_HOUR=${CURRENT_HOUR}" -v "CURRENT_DATE=${CURRENT_DATE}" -f ${AWK_FILE}
	LOAD_OFFLINE="load from ${OFFLINE_FILE} insert into offline;"
	LOAD_ONLINE="load from ${ONLINE_FILE} insert into online;"
	MYDATABASE=sysutils
	UNLOAD_STMT=""
	process_instance
else
	MYDATABASE=$IXMON_DATABASE
	case $USE_IXMON_FLAG in
	*1|10001) #Group (ok)
		dbaccess $MYDATABASE <<EOF 2>/dev/null 
UNLOAD TO /tmp/fnunes.unl
SELECT
	group_element
FROM
	ix_group g, ix_group_assoc g1
WHERE
	 g.name = '$IXMON_GROUP' AND g.id = g1.group_id
EOF

		cat /tmp/fnunes.unl | cut -f1 -d'|' | while read IXMON_INSTANCE_ID
		do
			IXMON_WHERE_CONDITION_ONLINE=" WHERE i.instance_id = '$IXMON_INSTANCE_ID' AND mode IN (2,5)"
			IXMON_WHERE_CONDITION_OFFLINE=" WHERE i.instance_id = '$IXMON_INSTANCE_ID' AND mode IN (2,5)"
			IXMON_FROM=" FROM instance_uptime i "
			LOAD_OFFLINE="INSERT INTO offline SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_OFFLINE;"
			LOAD_ONLINE="INSERT INTO online SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_ONLINE;"
			if [ "X${UNLOAD_FILE_FLAG}" = "X1" ]
			then
	
				UNLOAD_STMT=" UNLOAD TO $UNLOAD_FILE SELECT proc_get_inst_by_id($IXMON_INSTANCE_ID), 'Offline', ini Start_period, fim end_period, fim-ini elapsed_period FROM offline UNION ALL SELECT proc_get_inst_by_id($IXMON_INSTANCE_ID), 'Online ', ini start_period, fim end_period, fim-ini elapsed_period FROM online ORDER BY 2;"
			else
				UNLOAD_STMT=""
			fi
			process_instance
		done
		break
		;;	
	*10?|*01?) #-I without -H or vice-versa (error)
		printf "${PROGNAME} - Syntax error : Option -I must be used in conjunction with -H\n" >&2
		exit 1
		;;
	*110) #-I and -H (ok)
		IXMON_WHERE_CONDITION_ONLINE=" WHERE i.instance_id = proc_get_inst_id('$IXMON_INFORMIXSERVER', '$IXMON_HOSTNAME') AND mode IN (2,5)"
		IXMON_WHERE_CONDITION_OFFLINE=" WHERE i.instance_id = proc_get_inst_id('$IXMON_INFORMIXSERVER', '$IXMON_HOSTNAME') AND mode IN (0)"
		IXMON_FROM=" FROM instance_uptime i "
		LOAD_OFFLINE="INSERT INTO offline SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_OFFLINE;"
		LOAD_ONLINE="INSERT INTO online SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_ONLINE;"
		if [ "X${UNLOAD_FILE_FLAG}" = "X1" ]
		then

			UNLOAD_STMT=" UNLOAD TO $UNLOAD_FILE SELECT '$IXMON_INFORMIXSERVER@${IXMON_HOSTNAME}', 'Offline', ini Start_period, fim end_period, fim-ini elapsed_period FROM offline UNION ALL SELECT '$IXMON_INFORMIXSERVER@${IXMON_HOSTNAME}', 'Online ', ini start_period, fim end_period, fim-ini elapsed_period FROM online ORDER BY 2;"
		else
			UNLOAD_STMT=""
		fi
		process_instance
		break
		;;
	1000|11000 ) # Instance ID (ok)
		IXMON_WHERE_CONDITION_ONLINE=" WHERE i.instance_id = '$IXMON_INSTANCE_ID' AND mode IN (2,5)"
		IXMON_WHERE_CONDITION_OFFLINE=" WHERE i.instance_id = '$IXMON_INSTANCE_ID' AND mode IN (2,5)"
		IXMON_FROM=" FROM instance_uptime i "
		LOAD_OFFLINE="INSERT INTO offline SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_OFFLINE;"
		LOAD_ONLINE="INSERT INTO online SELECT start_period, last_check $IXMON_FROM $IXMON_WHERE_CONDITION_ONLINE;"
		if [ "X${UNLOAD_FILE_FLAG}" = "X1" ]
		then

			UNLOAD_STMT=" UNLOAD TO $UNLOAD_FILE SELECT proc_get_inst_by_id($IXMON_INSTANCE_ID), 'Offline', ini Start_period, fim end_period, fim-ini elapsed_period FROM offline UNION ALL SELECT proc_get_inst_by_id($IXMON_INSTANCE_ID), 'Online', ini start_period, fim end_period, fim-ini elapsed_period FROM online ORDER BY 2;"
		else
			UNLOAD_STMT=""
		fi
		process_instance
		break
		;;
	*)
		printf "${PROGNAME} - Error: Unexpected value for USE_IXMON_FLAG ($USE_IXMON_FLAG)\n" >&2
		exit 1
		;;
	esac

fi
