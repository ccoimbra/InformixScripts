#!/bin/sh
# Name: $RCSfile$
# CVS file: $Source$
# CVS id: $Header$
# Revision: $Revision$
# Revised on: $Date$
# Revised by: $Author$
# Support: Fernando Nunes - domusonline@gmail.com
# Licence: This script is licensed as GPL ( http://www.gnu.org/licenses/gpl.html )
# History:

ix_help()
{
        echo "${PROGNAME}: -V | -h | [-r <interval>] { -w | -m | -X | -t <table> | -T <table> | -s <session> | -S <session> | -u <user> | -U <user> }" >&1
        echo "               -V shows script version" >&1
        echo "               -h shows this help" >&1
        echo "               -m shows sessions with more locks" >&1
        echo "               -w shows sessions waiting for locks and these lock owners" >&1
        echo "               -r <interval> repeats command with <interval> seconds between cycles" >&1
        echo "               -t <table> shows locks on a table" >&1
        echo "               -T <table> shows exclusive locks on a table" >&1
        echo "               -s <session> shows locks hold by a session" >&1
        echo "               -S <session> shows exclusive locks hold by a session" >&1
        echo "               -u <session> shows locks hold by all sessions of a user" >&1
        echo "               -U <session> shows exclusive locks hold by all sessions of a user" >&1
        echo "               -X shows tables with exclusive locks" >&1
        echo "Ex: ${PROGNAME} -t stores7:customer" >&1
}

get_args()
{
	arg_ok='Vhmwr:t:T:s:S:u:U:X'
	list="$*"
	getopt ${arg_ok} $list >/dev/null 2>&1
	# check result of parsing
	if [ $? != 0 ]
	then
		return 1
	fi
	set -- `getopt "${arg_ok}" $list`

	OPTIONS_FLAG=0
	while [ $1 != -- ]
	do
		case $1 in
		-h)   # show help
			ix_help
			exit 0
			;;
		-V)   # show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
			;;
		-m)   # set up the -m (top sessions flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -m can not be used with -s, -S, -u, -U, -t, -T, -X or -w" >&2
				return 1
			fi
			if [ "X${TOP_SESSIONS_FLAG}" = "X1" ]
			then
				echo "Option -m already processed.">&2
				return 1
			fi
			TOP_SESSIONS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-w)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -w can not be used with -s, -S, -u, -U, -t, -T, -X or -m" >&2
				return 1
			fi
			if [ "X${LOCK_WAITERS_FLAG}" = "X1" ]
			then
				echo "Option -w already processed.">&2
				return 1
			fi
			LOCK_WAITERS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-X)   # set up the -X (table with exclusive locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -X can not be used with -s, -S, -u, -U, -t, -T, -w or -m" >&2
				return 1
			fi
			if [ "X${TABLES_XLOCKS_FLAG}" = "X1" ]
			then
				echo "Option -X already processed.">&2
				return 1
			fi
			TABLES_XLOCKS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-t)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -t can not be used with -s, -S, -u, -U, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${TABLE_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -t already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				TABLE_LOCK_FLAG=1
				OPTIONS_FLAG=1
				TABLE=$1
			else
				echo "${PROGNAME}: Syntax error;  -t flag requires a value" >&2
				return 1
			fi
			;;
		-T)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -T can not be used with -s, -S, -u, -U, -t, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${TABLE_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -T already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				TABLE_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				TABLE=$1
			else
				echo "${PROGNAME}: Syntax error;  -T flag requires a value" >&2
				return 1
			fi
			;;
		-s)   # set up the -s (session locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -s can not be used with -S, -u, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${SESSION_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -s already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				SESSION_LOCK_FLAG=1
				OPTIONS_FLAG=1
				SESSION=$1
			else
				echo "${PROGNAME}: Syntax error;  -s flag requires a value" >&2
				return 1
			fi
			;;
		-S)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -S can not be used with -s, -u, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${SESSION_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -S already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				SESSION_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				SESSION=$1
			else
				echo "${PROGNAME}: Syntax error;  -S flag requires a value" >&2
				return 1
			fi
			;;
		-u)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -u can not be used with -s, -S, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${USER_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -u already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				USER_LOCK_FLAG=1
				OPTIONS_FLAG=1
				USER_NAME=$1
			else
				echo "${PROGNAME}: Syntax error;  -u flag requires a value" >&2
				return 1
			fi
			;;
		-U)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -U can not be used with -s, -S, -u, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${USER_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -U already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				USER_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				USER_NAME=$1
			else
				echo "${PROGNAME}: Syntax error;  -U flag requires a value" >&2
				return 1
			fi
			;;
                -r)
			if [ "X${REPEAT_FLAG}" = "X1" ]
			then
				echo "${PROGNAME}: Syntax error - REPEAT flag was already interpreted" >&2
				return 1
			else
				shift
				if [ $# -ge 2 ]
				then
					REPEAT_FLAG=1
					INTERVAL=$1
					echo ${INTERVAL} | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
					RES=$?
					if [ "X${RES}" != "X0" ]
					then
						echo "${PROGNAME}: Syntax error - Wait time must be numeric" >&2
						return 1
					fi
				else
					echo "${PROGNAME}: Syntax error - REPEAT flag requires a value" >&2
					return 1
				fi
			fi
                        ;;
		esac
		shift
	done
}

Top10Locks()
{
	if [ $# = 0 ]
	then
		MY_DATABASE_FLAG=0
		DATABASE_IN_PROJ=""
		GROUP_CONDITION=" GROUP BY 1,2" 
		ORDER_CONDITION=" ORDER BY 3 DESC, 1, 2"
		DATABASE_CONDITION=""
	else
		MY_DATABASE_FLAG=1
		DATABASE_IN_PROJ=", t2.dbsname my_database_n"
		DATABASE_CONDITION=" AND t2.dbsname IN ( $* )"
		GROUP_CONDITION=" GROUP BY 1,2,4" 
		ORDER_CONDITION=" ORDER BY 4, 3 DESC, 1, 2"
	fi


	dbaccess sysmaster <<EOF 2>${TEMP_FILE_1}
UNLOAD TO ${TEMP_FILE}
SELECT
r.username myuser_1,
r.sid mysiduser_2,
TRUNC(COUNT(*),0) ||'' mycount_3
$DATABASE_IN_PROJ
FROM
        sysmaster:syslocktab l, sysmaster:flags_text f, sysmaster:systabnames t1,
        sysmaster:sysptnhdr p, sysmaster:systabnames t2, sysmaster:systxptab tx,
        sysmaster:sysrstcb r, outer sysmaster:sysrstcb r1
WHERE
p.partnum = l.lk_partnum AND
t2.partnum = p.lockid AND
t1.partnum = l.lk_partnum AND
l.lk_type =  f.flags AND
f.tabname = 'syslcktab' AND
tx.address = lk_owner AND
r.address = tx.owner AND
r1.address = lk_wtlist AND
r.sid != DBINFO('sessionid')
$DATABASE_CONDITION
$GROUP_CONDITION
$ORDER_CONDITION
EOF
	if [ $? != 0 ]
	then
		printf "Error while querying database\nError output:\n\n" >&2
		cat ${TEMP_FILE_1}
		exit 1
	fi
	if [ -s ${TEMP_FILE} ]
	then
		if [ "X$MY_DATABASE_FLAG" = "X0" ]
		then
			echo "User               SID        Nr Locks"
			echo "================== ========== ============"
	#		      123456789012345678 1234567890 123456789012
			${IX_AWK} -F'|' '{printf("%-18s %-10s %+12s\n", $1, $2, $3)}' ${TEMP_FILE}
		else
			echo "Database                         User               SID        Nr Locks"
			echo "================================ ================== ========== ============"
	#		      12345678901234567890123456789012 123456789012345678 1234567890 123456789012
			${IX_AWK} -F'|' '{printf("%-32s %-18s %-10s %-12s\n", $4, $1, $2, $3)}' ${TEMP_FILE}
		fi
	else
		printf "There are no sessions with locks\n"
	fi
}


TablesWithXLocks()
{
	LOCK_TYPE_CONDITION=" AND f.txt IN ('IX', 'X')"
	ORDER_CONDITION=" ORDER BY 1,3,2,5,7,4"


	dbaccess sysmaster <<EOF 2>${TEMP_FILE_1}
UNLOAD TO ${TEMP_FILE}
SELECT UNIQUE
t2.dbsname table_database_1,
t2.owner   table_owner_2,
t2.tabname table_name_3,
TRIM(t1.tabname) partition_name_4,
CASE
	WHEN p.nkeys = 0 THEN
		'Data'
	WHEN p.nkeys != 0 AND p.npdata > 0 THEN
		'Both'
	ELSE
		'Indx'
END partition_type_5,
t1.partnum || ':' || HEX(t1.partnum) partnumber_6,
CASE
	WHEN f.txt = 'IX' AND l.lk_rowid = 0 AND p.partnum = p.lockid THEN
		'IX (DDL)'
	WHEN f.txt = 'X' AND l.lk_rowid = 0 THEN
		'X  (Glb)'
	WHEN f.txt = 'X' AND l.lk_rowid != 0 THEN
		'X  (Row)'
	ELSE
		f.txt
END lock_type_7
FROM
        sysmaster:syslocktab l, sysmaster:flags_text f, sysmaster:systabnames t1,
        sysmaster:sysptnhdr p, sysmaster:systabnames t2, sysmaster:systxptab tx,
        sysmaster:sysrstcb r, outer sysmaster:sysrstcb r1
WHERE
p.partnum = l.lk_partnum AND
t2.partnum = p.lockid AND
t1.partnum = l.lk_partnum AND
l.lk_type =  f.flags AND
f.tabname = 'syslcktab' AND
tx.address = lk_owner AND
r.address = tx.owner AND
r1.address = lk_wtlist AND
r.sid != DBINFO('sessionid')
$LOCK_TYPE_CONDITION
$ORDER_CONDITION
EOF
	if [ $? != 0 ]
	then
		printf "Error while querying database\nError output:\n\n" >&2
		cat ${TEMP_FILE_1}
		exit 1
	fi
	if [ -s ${TEMP_FILE} ]
	then
		echo "Database           Owner            Tablename                      Partition Name                Type Partnum               Lck Type"
		echo "================== ================ ============================== ============================= ==== ===================== ========"
#		      123456789012345678 1234567890123456 123456789012345678901234567890 12345678901234567890123456789 1234 123456789012345678901 12345678
		${IX_AWK} -F'|' '{printf("%-18s %-16s %-30s %-29s %-4s %-21s %-8s\n", $1, $2, $3, $4, $5, $6, $7)}' ${TEMP_FILE}
	else
		printf "There are no tables with Exclusive (X) or Intent Exclusiv (IX) locks\n"
	fi
}

SessionLocks()
{
	#1 = ALL for ALL locks, X for exclusive (X,IX)
	#2 = S for SESSION, U for USER
	#3 = Session ID or Username

	if [ "X$1" = "XALL" ]
	then
		LOCK_CONDITION=""
	else
		LOCK_CONDITION=" AND f.txt IN ('IX','X')"
	fi

	if [ "X$2" = "XS" ]
	then
		SESSION_CONDITION=" r.sid != DBINFO('sessionid') AND r.sid = $3 "
	else
		SESSION_CONDITION=" r.sid != DBINFO('sessionid') AND r.username = '$3'"
	fi


	dbaccess sysmaster <<EOF 2>${TEMP_FILE_1}
UNLOAD TO ${TEMP_FILE}
SELECT
r.sid my_owner_sid_1,
TRIM(t2.owner)  table_owner_2,
TRIM(t2.tabname) table_name_3,
TRIM(t1.tabname) partition_name_4,
t1.partnum partnumber_5,
CASE
	WHEN l.lk_keynum = 0 THEN
		'DATA'
	ELSE
		'K-'||l.lk_keynum
	
END lock_key_6,
lk_rowid myrowid_7,
f.txt lock_type_8,
EXTEND(DBINFO('utc_to_datetime', l.lk_grtime), day to second) lock_time_9,
r1.sid ||':'||r1.username my_waiter_10,
TRIM(t2.dbsname) database_name_11,
TRIM(r.username) my_owner_user_12
FROM
        sysmaster:syslocktab l, sysmaster:flags_text f, sysmaster:systabnames t1,
        sysmaster:sysptnhdr p, sysmaster:systabnames t2, sysmaster:systxptab tx,
        sysmaster:sysrstcb r, outer sysmaster:sysrstcb r1
WHERE
p.partnum = l.lk_partnum AND
t2.partnum = p.lockid AND
t1.partnum = l.lk_partnum AND
l.lk_type =  f.flags AND
f.tabname = 'syslcktab' AND
tx.address = lk_owner AND
r.address = tx.owner AND
r1.address = lk_wtlist AND
$SESSION_CONDITION
$LOCK_CONDITION
ORDER BY 1,11,3,2,4,6
EOF

# NVL(r1.sid || ':' || TRIM(r1.username), 'N') mywaiter_9,

	if [ $? != 0 ]
	then
		printf "Error while querying database\nError output:\n\n" >&2
		cat ${TEMP_FILE_1}
		exit 1
	fi
	if [ -s ${TEMP_FILE} ]
	then
		if [ "X$2" = "XU" ]
		then
			#user was given, need to print it on the header and each row needs the SID
			if [ "X$1" = "XALL" ]
			then
				printf "All locks owned by user: $3\n\n"
			else
				printf "Exclusive (IX,X) locks owned by user: $3\n\n"
			fi
			${IX_AWK} -v DATABASE="1" -F'|' '
function print_header()
{
			printf "SID        Tablename                    Partition Name             Partnum    Type RowID      Lck Type Time        Waiter          \n";
			printf "========== ============================ ========================== ========== ==== ========== ======== =========== ================\n";
#			        1234567890 1234567890123456789012345678 12345678901234567890123456 1234567890 1234 1234567890 12345678 12345678901 1234567890123456
}
BEGIN {
		PREV_SID=-1;
}
{
	if ( PREV_SID != $1 )
	{
		printf "\n";
		print_header();
	}

	if ( DATABASE != $11 || PREV_SID != $1 )
	{
		printf "Database: %s\n",$11;
		DATABASE=$11;
	}
#Owner	printf("%-10s %-14s %-28s %-26s %-10s %-4s %-10s %-8s %-11s %-2s\n", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10 )
	printf("%-10s %-28s %-26s %-10s %-4s %-10s %-8s %-11s %-16s\n", $1, $3, $4, $5, $6, $7, $8, $9, $10 )
	PREV_SID=$1;
}' ${TEMP_FILE}
		else
			#SID was given. Need to print it on the header and get the user from the file. Neither SID nor USER will be shown on every row
			if [ "X$1" = "XALL" ]
			then
				${IX_AWK} -F'|' '{printf ("All locks owned by user: %s with SID: %s\n\n", $12, $1);exit}' ${TEMP_FILE}
			else
				${IX_AWK} -F'|' '{printf ("Exclusive locks (IX,X) owned by user: %s with SID: %s\n\n",  $12,$1);exit}' ${TEMP_FILE}
			fi
			${IX_AWK} -v DATABASE="1" -F'|' '
function print_header()
{
			printf "Database      Tablename                    Partition Name             Partnum    Type RowID      Lck Type Time        Waiter        \n";
			printf "============= ============================ ========================== ========== ==== ========== ======== =========== ==============\n";
#			        1234567890123 1234567890123456789012345678 12345678901234567890123456 1234567890 1234 1234567890 12345678 12345678901 12345678901234
}
BEGIN {
		print_header();
		PREV_SID=-1;
}
{
	printf("%-13s %-28s %-26s %-10s %-4s %-10s %-8s %-11s %-16s\n", $11, $3, $4, $5, $6, $7, $8, $9, $10 )
	PREV_SID=$1;
}' ${TEMP_FILE}
		fi
	else
		TAB_COUNT=`dbaccess sysmaster <<EOF 2>/dev/null| grep "^Result:" | cut -f2 -d':'
SELECT
	'Result:'||COUNT(*)
FROM
	sysrstcb r
WHERE
	1=1
	$SESSION_CONDITION
EOF
`
		if [ $TAB_COUNT -eq 0 ]
		then
			printf "The specified session does not exist or the specified user has no sessions\n"
		else
			echo "No locks for this user/sid..."
		fi
	fi
}

SessionAllLocks()
{
	SessionLocks ALL S $SESSION
}

SessionXLocks()
{
	SessionAllLocks X S $SESSION
}

UserLocks()
{
	SessionLocks ALL U $USER_NAME
}
UserXLocks()
{
	SessionLocks X U $USER_NAME
}

TableLocks()
{
	echo $TABLE | grep ":" >/dev/null
	if [ $? = 0 ]
	then
		#Table given in database:table syntax
		DBNAME=`echo ${TABLE} | cut -f1 -d':'`
		TABNAME=`echo ${TABLE} | cut -f2 -d':'`
		echo $TABNAME | grep "\." > /dev/null
		if [ $? = 0 ]
		then
			OWNER=`echo ${TABNAME} | cut -f1 -d '.'`	
			TABNAME=`echo ${TABNAME} | cut -f2 -d '.'`	
		else
			OWNER='?'
		fi

		TABLE_CONDITION="AND t2.tabname = '$TABNAME' AND t2.dbsname = '$DBNAME'"
	else
		TABLE=`echo $TABLE | tr "[:upper:]" "[:lower:]"`
		echo $TABLE | grep "[a-f]"  >/dev/null
		if [ $? = 0 ]
		then
			#table given in hex notation
			echo $TABLE | egrep "^(0x)?{[a-z0-9]$" >/dev/null
			if [ $? != 0 ]
			then
				#hex notation with erroneous characters
				echo "Table specification seems to be in hex (not <db>:<table>) but has invalid characters">&2
				exit 1
			else
				echo $TABLE | grep "^0x[a-z0-9]" >/dev/null
				if [ $? != 0 ]
				then
					PARTNUM=${TABLE}
				else	
					PARTNUM=`echo $TABLE | cut -c3-`
				fi
			fi
		else
			PARTNUM=` echo $TABLE | ${IX_AWK} '{ printf("%x\n",$1) }'`
		fi
		TABLE_CONDITION="AND t2.partnum = '$PARTUNUM' "
	fi

	if [ -z "$1" ]
	then
		LOCK_TYPE_CONDITION=""
	else
		LOCK_TYPE_CONDITION=" AND f.txt = 'X' "
	fi

	dbaccess ${DBNAME} <<EOF 2>${TEMP_FILE_1}
UNLOAD TO ${TEMP_FILE}
SELECT
r.sid || ':' || TRIM(r.username) myowner_1,
TRIM(t1.tabname) partition_name_2,
CASE
        WHEN (MOD(lk_flags,2*2) >= 2) THEN
                "HDR+"||f.txt
        ELSE
                f.txt
END lock_type_3,
TRIM(db_f.partition) frag_name_4,
lk_rowid myrowid_5,
r1.sid || ':' || TRIM(r1.username) mywaiter_6,
CASE
	WHEN l.lk_keynum = 0 THEN
		'DATA'
	ELSE
		'K-'||l.lk_keynum
	
END lock_key_7,
EXTEND(DBINFO('utc_to_datetime', l.lk_grtime), day to second) lock_time_8,
t1.partnum partnumber_9,
t2.tabname table_name_10,
HEX(t2.partnum) table_partnum_11,
t2.dbsname table_database_12,
t2.owner   table_owner_13,
r.sid sid_14
FROM
        outer sysfragments db_f,
        sysmaster:syslocktab l, sysmaster:flags_text f, sysmaster:systabnames t1,
        sysmaster:sysptnhdr p, sysmaster:systabnames t2, sysmaster:systxptab tx,
        sysmaster:sysrstcb r, outer sysmaster:sysrstcb r1
WHERE
db_f.partn = p.partnum AND
p.partnum = l.lk_partnum AND
t2.partnum = p.lockid AND
t1.partnum = l.lk_partnum AND
l.lk_type =  f.flags AND
f.tabname = 'syslcktab' AND
tx.address = lk_owner AND
r.address = tx.owner AND
r1.address = lk_wtlist AND
r.sid != DBINFO('sessionid')
$TABLE_CONDITION
$LOCK_TYPE_CONDITION
ORDER BY 14, 7, 9 
EOF

	if [ $? != 0 ]
	then
		printf "Error while querying database\nError output:\n\n" >&2
		cat ${TEMP_FILE_1}
		exit 1
	fi
	if [ -s ${TEMP_FILE} ]
	then
		${IX_AWK} -F'|' '{printf "Database: %s Table: %s.%s Partnum: %s\n\n", $12, $13, $10, $11;exit}' ${TEMP_FILE}
		echo "SID:User           Partition/index name (sysmaster) LkType Name(sysfragments) RowID      Waiter SID:User  Key? Time set    Partnum "
		echo "================== ================================ ====== ================== ========== ================ ==== =========== ========"
#		      123456789012345678 12345678901234567890123456789012 123456 123456789012345678 1234567890 1234567890123456 1234 12345678901 12345678
		${IX_AWK} -F'|' '{printf("%-18s %-32s %-6s %-18s %-10s %-16s %-4s %-11s %-8s\n", $1, $2, $3, $4, $5, $6, $7, $8, $9)}' ${TEMP_FILE}
	else
		TAB_COUNT=`dbaccess sysmaster <<EOF 2>/dev/null| grep "^Result:" | cut -f2 -d':'
SELECT
	'Result:'||COUNT(*)
FROM
	systabnames t2
WHERE
	1=1
	$TABLE_CONDITION
EOF
`
		if [ $TAB_COUNT -eq 0 ]
		then
			printf "The specified table does not exist\n"
		else
			echo "No locks for this table..."
		fi
	fi

}

TableXLocks()
{
	TableLocks X
}


lock_waiters()
{
which ixses | grep "^no ixses" >/dev/null 2>/dev/null
if [ $? = 0 ]
then
	#... no ixses...
	#MON_CMD="onstat -g sql"
	MON_CMD="onstat -g ses"
else
	MON_CMD="ixses"
fi

dbaccess sysmaster <<EOF     2>/dev/null
UNLOAD TO ${TEMP_FILE}
select

        current year to second out_snapshot,
	l.indx out_lock_id,
	extend(dbinfo('utc_to_datetime', grtime), day to second) out_lock_establish,
        t.sid out_wait_sid,
	t.username out_wait_user,
	t.tid out_wait_thread,
	t2.sid out_owner_sid,
	t2.username out_owner_user,
	a.dbsname out_dbsname,
	a.tabname out_tabname,
        current year to second - dbinfo('utc_to_datetime', grtime) out_lock_duration,
        current year to second - dbinfo('utc_to_datetime',g.start_wait) out_lock_wait,
	dbinfo('utc_to_datetime',start_wait) out_wait_tstamp,

	h.pid out_pid,
	h.progname out_owner_progname,
	h.hostname out_owner_hostname,
	extend(dbinfo('utc_to_datetime', h.connected),day to second) out_owner_connected,

	h2.pid out_waiter_pid,
	h2.progname out_waiter_progname,
	h2.hostname out_waiter_hostname,
	extend(dbinfo('utc_to_datetime', h2.connected),day to second) out_waiter_connected
from
        sysrstcb t, syslcktab l, sysrstcb t2,  systxptab c, systabnames a, systcblst g, sysscblst h, sysscblst h2

where
        t.lkwait = l.address and

        l.owner = c.address and
        c.owner = t2.address and
        l.partnum = a.partnum and
        g.tid = t.tid and
	h2.sid = t.sid and
	h.sid = t2.sid
order by out_lock_duration desc, out_lock_id;
EOF

FIRST_FLAG=1
OLD_LOCK_ID=-1
cat ${TEMP_FILE} | while read linha
do
	v_lock_id=`echo $linha | cut -f2 -d'|'`
	v_wait_sid=`echo $linha | cut -f4 -d'|'`
	v_wait_user=`echo $linha | cut -f5 -d'|'`
	v_wait_thread=`echo $linha | cut -f6 -d'|'`
	v_lock_wait=`echo $linha | cut -f12 -d'|'`
	v_wait_tstamp=`echo $linha | cut -f13 -d'|'`

	v_wait_pid=`echo $linha | cut -f18 -d'|'`
	v_wait_progname=`echo $linha | cut -f19 -d'|'`
	v_wait_hostname=`echo $linha | cut -f20 -d'|'`
	v_wait_connected=`echo $linha | cut -f21 -d'|'`
	
	if [ "X${FIRST_FLAG}" = "X1" ]
	then
		FIRST_FLAG=0
		v_snapshot=`echo $linha | cut -f1 -d'|'`
		printf "Lock waiting at: %s\n\n" "$v_snapshot"
	fi
	
	if [ "X${OLD_LOCK_ID}" != "X${v_lock_id}" ]
	then
		echo "-----------------------------------------------------------------------------------------------------------------------------------"

		v_lock_establish=`echo $linha | cut -f3 -d'|'`
		v_owner_sid=`echo $linha | cut -f7 -d'|'`
		v_owner_user=`echo $linha | cut -f8 -d'|'`
		v_dbsname=`echo $linha | cut -f9 -d'|'`
		v_tabname=`echo $linha | cut -f10 -d'|'`
		v_lock_duration=`echo $linha | cut -f11 -d'|'`

		v_owner_pid=`echo $linha | cut -f14 -d'|'`
		v_owner_progname=`echo $linha | cut -f15 -d'|'`
		v_owner_hostname=`echo $linha | cut -f16 -d'|'`
		v_owner_connected=`echo $linha | cut -f17 -d'|'`

		printf "Lock ID: %-11s Database: %s Table: %s\n" $v_lock_id $v_dbsname $v_tabname
		printf "Lock established at: %s    Lock duration: %s\n\n" "$v_lock_establish" "$v_lock_duration"
		printf "Lock Owner info:\n"
		printf "User: %s  SID: %s Hostname: %s Connected at: %s PID: %s Program: %s\n\n" $v_owner_user $v_owner_sid $v_owner_hostname "$v_owner_connected" $v_owner_pid "$v_owner_progname"
		printf "Waiters Info:\n"
		printf "%-12s %-10s %-12s %-9s %-11s %-30s %-8s %-20s\n" "USER" "SID" "THREAD" "WAIT FOR..." "CONNECTED" "HOSTNAME" "PID" "PROGNAME"
		OLD_LOCK_ID=$v_lock_id
	fi

	printf "%-12s %-10s %-12s %-9s %-11s %-30s %-8s %-20s\n\n\n" "$v_wait_user" "$v_wait_sid" "$v_wait_thread" "$v_lock_wait" "$v_wait_connected" "$v_wait_hostname" "$v_wait_pid" "$v_wait_progname"
done
}


cleanup()
{
	rm -f $TEMP_FILE $TEMP_SQL $TEMP_FILE_1
}

#INIT

PROGNAME=`basename $0`
VERSION=`echo "$Revision$" | cut -f2 -d' '`

trap cleanup 0

get_args $*
if [ $? != 0 ]
then
        echo "Error parsing parameters" >&2
        exit 1
fi



SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
sunos*)
        IX_AWK=nawk
        ;;
osf*)
        IX_AWK=nawk
        ;;
linux|*)
        IX_AWK=gawk
        ;;
esac


TEMP_SQL=/tmp/${PROGNAME}_$$.sql
TEMP_FILE=/tmp/${PROGNAME}_$$.tmp
TEMP_FILE_1=/tmp/${PROGNAME}_1_$$.tmp

while true
do
if [  "X${TOP_SESSIONS_FLAG}" = "X1" ]
then
	Top10Locks
fi

if [ "X${TABLES_XLOCKS_FLAG}" = "X1" ]
then
	TablesWithXLocks
fi

if [  "X${SESSION_LOCK_FLAG}" = "X1" ]
then
	SessionAllLocks
fi

if [  "X${SESSION_XLOCK_FLAG}" = "X1" ]
then
	SessionXLocks
fi

if [ "X${LOCK_WAITERS_FLAG}" = "X1" ]
then
	lock_waiters
fi

if [ "X${TABLE_LOCK_FLAG}" = "X1" ]
then
	TableLocks
	if [ $? != 0 ]
	then
		break
	fi
fi

if [ "X${TABLE_XLOCK_FLAG}" = "X1" ]
then
	TableXLocks
	if [ $? != 0 ]
	then
		break
	fi
fi

if [ "X${USER_LOCK_FLAG}" = "X1" ]
then
	UserLocks
fi

if [ "X${USER_XLOCK_FLAG}" = "X1" ]
then
	UserXLocks
fi

if [ "X${REPEAT_FLAG}" != "X1" ]
then
	break
else
	sleep ${INTERVAL}
fi
done
