#/bin/sh
# Name: $RCSfile$
# CVS file: $Source$
# CVS id: $Header$
# Revision: $Revision$
# Revised on: $Date$
# Revised by: $Author$
# Support: Fernando Nunes - domusonline@domus.online.pt
# Licence: This script is licensed as GPL ( http://www.gnu.org/licenses/gpl.html )
# History:

ix_help()
{
        echo "${PROGNAME}: -V | -h | [-r <interval>] { -w | -m | -X | -t <table> | -T <table> | -s <session> | -S <session> | -u <user> | -U <user> }" >&1
        echo "               -V shows script version" >&1
        echo "               -h shows this help" >&1
        echo "               -m shows sessions with more locks" >&1
        echo "               -w shows sessions waiting for locks and these lock owners" >&1
        echo "               -r <interval> repeats command with <interval> seconds between cycles" >&1
        echo "               -t <table> shows locks on a table" >&1
        echo "               -T <table> shows exclusive locks on a table" >&1
        echo "               -s <session> shows locks hold by a session" >&1
        echo "               -S <session> shows exclusive locks hold by a session" >&1
        echo "               -u <session> shows locks hold by all sessions of a user" >&1
        echo "               -U <session> shows exclusive locks hold by all sessions of a user" >&1
        echo "               -X shows tables with exclusive locks" >&1
        echo "Ex: ${PROGNAME} -t stores7:customer" >&1
}

get_args()
{
	arg_ok='Vhmwr:t:T:s:S:u:U:X'
	list="$*"
	getopt ${arg_ok} $list >/dev/null 2>&1
	# check result of parsing
	if [ $? != 0 ]
	then
		return 1
	fi
	set -- `getopt "${arg_ok}" $list`

	OPTIONS_FLAG=0
	while [ $1 != -- ]
	do
		case $1 in
		-h)   # show help
			ix_help
			exit 0
			;;
		-V)   # show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
			;;
		-m)   # set up the -m (top sessions flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -m can not be used with -s, -S, -u, -U, -t, -T, -X or -w" >&2
				return 1
			fi
			if [ "X${TOP_SESSIONS_FLAG}" = "X1" ]
			then
				echo "Option -m already processed.">&2
				return 1
			fi
			TOP_SESSIONS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-w)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -w can not be used with -s, -S, -u, -U, -t, -T, -X or -m" >&2
				return 1
			fi
			if [ "X${LOCK_WAITERS_FLAG}" = "X1" ]
			then
				echo "Option -w already processed.">&2
				return 1
			fi
			LOCK_WAITERS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-X)   # set up the -X (table with exclusive locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -X can not be used with -s, -S, -u, -U, -t, -T, -w or -m" >&2
				return 1
			fi
			if [ "X${TABLES_XLOCKS_FLAG}" = "X1" ]
			then
				echo "Option -X already processed.">&2
				return 1
			fi
			TABLES_XLOCKS_FLAG=1
			OPTIONS_FLAG=1
			;;
		-t)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -t can not be used with -s, -S, -u, -U, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${TABLE_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -t already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				TABLE_LOCK_FLAG=1
				OPTIONS_FLAG=1
				TABLE=$1
			else
				echo "${PROGNAME}: Syntax error;  -t flag requires a value" >&2
				return 1
			fi
			;;
		-T)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -T can not be used with -s, -S, -u, -U, -t, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${TABLE_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -T already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				TABLE_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				TABLE=$1
			else
				echo "${PROGNAME}: Syntax error;  -T flag requires a value" >&2
				return 1
			fi
			;;
		-s)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -s can not be used with -S, -u, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${SESSION_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -s already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				SESSION_LOCK_FLAG=1
				OPTIONS_FLAG=1
				SESSION=$1
			else
				echo "${PROGNAME}: Syntax error;  -s flag requires a value" >&2
				return 1
			fi
			;;
		-S)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -S can not be used with -s, -u, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${SESSION_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -S already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				SESSION_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				SESSION=$1
			else
				echo "${PROGNAME}: Syntax error;  -S flag requires a value" >&2
				return 1
			fi
			;;
		-u)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -u can not be used with -s, -S, -U, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${USER_LOCK_FLAG}" = "X1" ]
			then
				echo "Option -u already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				USER_LOCK_FLAG=1
				OPTIONS_FLAG=1
				USER_NAME=$1
			else
				echo "${PROGNAME}: Syntax error;  -u flag requires a value" >&2
				return 1
			fi
			;;
		-U)   # set up the -t (table locks flag)
			if [ "X${OPTIONS_FLAG}" = "X1" ]
			then
				echo "Option -U can not be used with -s, -S, -u, -t, -T, -w, -X or -m" >&2
				return 1
			fi
			if [ "X${USER_XLOCK_FLAG}" = "X1" ]
			then
				echo "Option -U already processed.">&2
				return 1
			fi
			
			shift
			if [ $# -ge 2 ]
			then
				USER_XLOCK_FLAG=1
				OPTIONS_FLAG=1
				USER_NAME=$1
			else
				echo "${PROGNAME}: Syntax error;  -U flag requires a value" >&2
				return 1
			fi
			;;
                -r)
			if [ "X${REPEAT_FLAG}" = "X1" ]
			then
				echo "${PROGNAME}: Syntax error - REPEAT flag was already interpreted" >&2
				return 1
			else
				echo $*
				shift
				echo $*
				echo num: $#
				if [ $# -ge 2 ]
				then
					REPEAT_FLAG=1
					INTERVAL=$1
					echo ${INTERVAL} | grep "^[0-9][0-9]*$" 1>/dev/null 2>/dev/null
					RES=$?
					if [ "X${RES}" != "X0" ]
					then
						echo "${PROGNAME}: Syntax error - Wait time must be numeric" >&2
						return 1
					fi
				else
					echo "${PROGNAME}: Syntax error - REPEAT flag requires a value" >&2
					return 1
				fi
			fi
                        ;;
		esac
		shift
	done
}

Top10Locks()
{
	echo "# NumLocks Session User" | \
	$IX_AWK '{ printf("\n%2s %8s %8s %-16s\n",$1,$2,$3,$4) }'

	echo "== ======== ======== ================" | \
	$IX_AWK '{ printf("%2s %8s %8s %-16s\n",$1,$2,$3,$4) }'

	onstat -u | egrep "^[0-9]" |  ${IX_AWK} '{ print $8,$3,$4 }' | \
	sort -nr -k1,1 | head -10 | ${IX_AWK} '{ printf("%2d %8d %8d %-16s\n",FNR,$1,$2,$3) }'
}

TablesWithXLocks()
{
	echo "Getting Lock's info from DB engine..."
	echo "select 'Locked:' || partnum || ' ' || dbsname || ' ' || tabname from systabnames where hex(partnum) in ('0'" >${TEMP_SQL}
	onstat -k | egrep "\+X |\+IX " | ${IX_AWK} '{print $6}' | sort | uniq  | tr "[a-z]" "[A-Z]" >${TEMP_FILE}
	for i in `cat ${TEMP_FILE} | ${IX_AWK} '{ print $1 }' | tr "[a-z]" "[A-Z]"`
	do
		echo ",'0x00$i'" >>${TEMP_SQL}
	done
	echo ") ;" >>${TEMP_SQL}
	echo "Getting Data from sysmaster DB..."
	echo "It takes a while..."
	dbaccess sysmaster ${TEMP_SQL} >>${TEMP_FILE} 2>&1

	grep "Locked" ${TEMP_FILE} | cut -d: -f2 | ${IX_AWK} '{printf("%-10s %s:%-20s\n",$1,$2,$3)}' >${TEMP_FILE_1}
	echo
	echo "`cat ${TEMP_FILE_1} | wc -l` tables with exclusive locks (table|index|row level)"
	echo
	sleep 2
	echo "PartNum    Tabname" >${TEMP_FILE}
	echo "========== =============" >>${TEMP_FILE}
	cat ${TEMP_FILE_1} >>${TEMP_FILE}
	cat ${TEMP_FILE}
	rm ${TEMP_SQL} ${TEMP_FILE} ${TEMP_FILE_1}
}

SessionAllLocks()
{
	OWNER=`onstat -u | ${IX_AWK} -v"SESSION=$SESSION" '{ if ( $3 ~ SESSION ) {print $1} }'`
	echo "unload to ${TEMP_FILE} select dbsname,tabname from systabnames where partnum in (1" >${TEMP_SQL}
	if [ $# = 0 ]
	then
		for j in  `onstat -K | ${IX_AWK} -v"OWNER=$OWNER" '{ if ( $3 ~ OWNER ) { print "0x"$7"" }}' |sort -u`
		do
			echo ",'$j'"
		done >>${TEMP_SQL}
	else
		for j in  `onstat -K | ${IX_AWK} -v"OWNER=$OWNER" '{ if ( $3 ~ OWNER && $6 ~ /+X/ ) { print "0x"$7"" }}' |sort -u`
		do
			echo ",'$j'"
		done >>${TEMP_SQL}
	fi
	echo ")" >>${TEMP_SQL}
	dbaccess sysmaster ${TEMP_SQL}  2>/dev/null 
	if [ -s ${TEMP_FILE} ]
	then
		echo "Tables with locks for session $SESSION"
		echo "Database           Table"
		echo "================== =================="
		${IX_AWK} -F '|' '{printf("%-18s %-18s\n", $1,$2) }' ${TEMP_FILE}
	else
		echo "No locks for session $SESSION" && return
	fi
	rm ${TEMP_SQL} ${TEMP_FILE}
}

SessionXLocks()
{
	SessionAllLocks X
}

UserLocks()
{
	for SESSION in `onstat -u | grep ${USER_NAME} | ${IX_AWK} '{if ($3 != 0) {print $3}}'`
	do
		SessionAllLocks
	done
}
UserXLocks()
{
	for SESSION in `onstat -u | grep ${USER_NAME} | ${IX_AWK} '{if ($3 != 0) {print $3}}'`
	do
		SessionXLocks
	done
}

TableLocks()
{
	echo $TABLE | grep ":" >/dev/null
	if [ $? = 0 ]
	then
		#Table given in database:table syntax
		DBNAME=`echo ${TABLE} | cut -f1 -d':'`
		TABNAME=`echo ${TABLE} | cut -f2 -d':'`
	        PARTNUM=`dbaccess sysmaster <<EOF 2>/dev/null | grep "^partnum:*"
SELECT "partnum:"||partnum
FROM systabnames
WHERE dbsname = "$DBNAME"
AND tabname = "$TABNAME";
EOF
`
		PARTNUM=`echo $PARTNUM | cut -f2 -d':'`
		PARTNUM=` echo $PARTNUM | ${IX_AWK} '{ printf("%x\n",$1) }'`
		echo "Database ($DBNAME); Table ($TABNAME); PartNum ($PARTNUM)"
	else
		TABLE=`echo $TABLE | tr "[:upper:]" "[:lower:]"`
		echo $TABLE | grep "[a-f]"  >/dev/null
		if [ $? = 0 ]
		then
			#table given in hex notation
			echo $TABLE | egrep "^(0x)?{[a-z0-9]$" >/dev/null
			if [ $? != 0 ]
			then
				#hex notation with erroneous characters
				echo "Table specification seems to be in hex (not <db>:<table>) but has invalid characters">&2
				exit 1
			else
				echo $TABLE | grep "^0x[a-z0-9]" >/dev/null
				if [ $? != 0 ]
				then
					PARTNUM=${TABLE}
				else	
					PARTNUM=`echo $TABLE | cut -c3-`
				fi
			fi
		else
			PARTNUM=` echo $TABLE | ${IX_AWK} '{ printf("%x\n",$1) }'`
		fi
	fi

	if [ -z "$PARTNUM" ]
	then
		return
	else
		if [ -z "$1" ]
		then
			onstat -K | grep $PARTNUM | sort -k3  > ${TEMP_FILE}
		else
			onstat -K | ${IX_AWK} -v"PARTNUM=$PARTNUM" '{ if ( $7 == PARTNUM && $8 ~ /^0$/ && $6 ~ "+X" ) {print $0 }}' >${TEMP_FILE}
		fi
		if [ -s ${TEMP_FILE} ]
		then
			rstcb_ant=-1
			echo "session   user               lock type RowID  Waiter"
			echo "========= ================== ========= ====== ======"
		

			while read dummy dummy1 rstcb dummy2 dummy3 lock_type dummy4 rowid dummy5
			do
				if [ ${rstcb_ant} != ${rstcb} ]
				then
					linha=`onstat -u | grep ${rstcb}`
					session_id=`echo $linha | cut -f3 -d' '`
					username=`echo $linha | cut -f4 -d' '`
					rstcb_ant=${rstcb}
				fi
				if [ $dummy1 != 0 ]
				then
					session_wait=`onstat -u | grep ${dummy1} | cut -f3 -d' '`
				else
					session_wait=""
				fi
				echo $session_id $username $lock_type $rowid $session_wait | ${IX_AWK} '{ printf("%-9d %-18s %-9s %6s %-9d\n",$1,$2,$3,$4,$5) }' 
			done <${TEMP_FILE}
		else
			echo "No locks for this table..."
		fi
	fi

	
	rm ${TEMP_FILE}
}

TableXLocks()
{
	TableLocks X
}







lock_waiters()
{
which ixses | grep "^no ixses" >/dev/null 2>/dev/null
if [ $? = 0 ]
then
	#... no ixses...
	#MON_CMD="onstat -g sql"
	MON_CMD="onstat -g ses"
else
	MON_CMD="ixses"
fi
onstat -K | egrep -v -e "^$" -e "^Locks" -e "^address" -e active -e "^Informix" -e "^IBM" | ${IX_AWK} '$2 !~ "^0$" {print $0}' | while read linha
do
	waiter_RSTCB=`echo $linha | cut -f2 -d' '`
	owner_RSTCB=`echo $linha | cut -f3 -d' '`
	table=`echo $linha | cut -f7 -d' '`

	echo "Locked table:"
	echo "----------------------"
	dbaccess sysmaster <<EOF 2>>/dev/null
select partnum, dbsname, tabname from systabnames where partnum = '0x${table}'
EOF

	echo "----------------------"
	left=1
	for ses in `onstat -u | grep -e "^${waiter_RSTCB}" -e "^${owner_RSTCB}" | ${IX_AWK} '{print $3}'`
	do
		if [ ${left} = 1 ]
		then
			${MON_CMD} $ses
		else
			${MON_CMD} $ses
		fi
	done
	echo "-------------------------------------------------------------"
done
}

#INIT

PROGNAME=`basename $0`
VERSION=`echo "$Revision$" | cut -f2 -d' '`


get_args $*
if [ $? != 0 ]
then
        echo "Error parsing parameters" >&2
        exit 1
fi



SO=`uname -s | tr "[:upper:]" "[:lower:]"`
case $SO in
sunos*)
        IX_AWK=nawk
        ;;
osf*)
        IX_AWK=nawk
        ;;
linux|*)
        IX_AWK=gawk
        ;;
esac


TEMP_SQL=/tmp/${PROGNAME}_$$.sql
TEMP_FILE=/tmp/${PROGNAME}_$$.tmp
TEMP_FILE_1=/tmp/${PROGNAME}_1_$$.tmp
TEMP_FILE_2=/tmp/${PROGNAME}_2_$$.tmp

while true
do
if [  "X${TOP_SESSIONS_FLAG}" = "X1" ]
then
	Top10Locks
fi

if [ "X${TABLES_XLOCKS_FLAG}" = "X1" ]
then
	TablesWithXLocks
fi

if [  "X${SESSION_LOCK_FLAG}" = "X1" ]
then
	SessionAllLocks
fi

if [  "X${SESSION_XLOCK_FLAG}" = "X1" ]
then
	SessionXLocks
fi

if [ "X${LOCK_WAITERS_FLAG}" = "X1" ]
then
	lock_waiters
fi

if [ "X${TABLE_LOCK_FLAG}" = "X1" ]
then
	TableLocks
fi

if [ "X${TABLE_XLOCK_FLAG}" = "X1" ]
then
	TableXLocks
fi

if [ "X${USER_LOCK_FLAG}" = "X1" ]
then
	UserLocks
fi

if [ "X${USER_XLOCK_FLAG}" = "X1" ]
then
	UserXLocks
fi

if [ "X${REPEAT_FLAG}" != "X1" ]
then
	break
else
	sleep ${INTERVAL}
fi
done
