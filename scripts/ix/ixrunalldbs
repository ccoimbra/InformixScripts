#!/bin/ksh
# Copyright (c) 2013-2017 Fernando Nunes - domusonline@gmail.com
# License: This script is licensed as GPL V2 ( http://www.gnu.org/licenses/old-licenses/gpl-2.0.html )
# $Author: Fernando Nunes - domusonline@gmail.com $
# $Revision: 2.0.15 $
# $Date 2017-05-31 23:34:45$
# Disclaimer: This software is provided AS IS, without any kind of guarantee. Use at your own risk.
#             Although the author is/was an IBM employee, this software was created outside his job engagements.
#             As such, all credits are due to the author.

PROGNAME=`basename $0`
NO_IGNORE_ERRORS=0
VERSION=`echo "$Revision: 2.0.15 $" | cut -f2 -d' '`

show_usage()
{
	printf "%s : [-n|-N] [-i iteraction_file -g global_file] [-s] <sql_file> \n" ${PROGNAME}
	printf "       -n                : Don't ignore SQL errors in each script. Stops processing of the script on first error on each database, but continues to the next\n"
	printf "       -N                : Don't ignore SQL errors in each script. Stops processing of the script on first error and doesn't proceed to the next database\n"
	printf "                         : sql_file SQL file to run on all databases\n"
	printf "       -i iteration_file : File written in each DB iteraction that should be concatenated to the global file\n"
	printf "       -g gloabl_file    : File to receive the contatenated result from the iteraction file\n"
	printf "       -s                : Include system databases\n"
}

TMP_FILE_UNL=/tmp/${PROGNAME}.unl.$$
TMP_FILE_ERR=/tmp/${PROGNAME}.err.$$
no_ignore_erros_flag=""

clean_up()
{
	rm -f ${TMP_FILE_UNL} ${TMP_FILE_ERR}
}

trap clean_up 0

get_args()
{
	arg_ok="hVnNeg:i:s"

	while getopts ${arg_ok} OPTION
	do
		case ${OPTION} in
		h)   # show usage
			show_usage
			exit 0
                        ;;
		V)      #show version
			echo "${PROGNAME} ${VERSION}" >&1
			exit 0
			;;
		i)      #iteraction file
			if [ "X${EXPORT_FLAG}" = "X1" ]
			then
				printf -- "-i flag cannot be used with -e\n"
				return 1
			else
				ITERACTION_FILE_FLAG=1
				ITERACTION_FILE=$OPTARG
			fi
			;;
		g)      #iteraction file
			if [ "X${EXPORT_FLAG}" = "X1" ]
			then
				printf -- "-g flag cannot be used with -e\n"
				return 1
			else
				GLOBAL_FILE_FLAG=1
				GLOBAL_FILE=$OPTARG
			fi
			;;
		e)      #export databases
			if [ "X${NO_IGNORE_ERRORS}" = "X1" -o "X${ITERACTION_FILE_FLAG}" = "X1" -o "X${GLOBAL_FILE_FLAG}" = "X1" ]
			then
				printf -- "-n,i and -g options cannot be used with -e flag\n" >&2
				return 1
			else
				EXPORT_FLAG=1
			fi 
			;;
		n)
			if [ "X${no_ignore_errors_flag}" = "X1" ]
			then
				printf -- "-n and -N flags can be used only once\n" >&2
				return 1
			fi
			if [ "X${EXPORT_FLAG}" = "X1" ]
			then
				printf -- "-n and -e flags cannot be used together\n" >&2
				return 1
			fi
			no_ignore_errors_flag=1
			NO_IGNORE_ERRORS=1
			;;
		N)
			if [ "X${no_ignore_errors_flag}" = "X1" ]
			then
				printf -- "-n and -N flags can be used only once\n" >&2
				return 1
			fi
			no_ignore_errors_flag=1
			NO_IGNORE_ERRORS=2
			;;
		s)
			if [ "X${INCLUDE_SYSTEM_DBS_FLAG}" = "X1" ]
			then
				printf -- "-s flag can be used only once\n" >&2
				return 1
			fi
			INCLUDE_SYSTEM_DBS_FLAG=1
		esac
	done
	shift `expr $OPTIND - 1`

	if [ "X${EXPORT_FLAG}" != "X1" ]
	then
		SQL_FILE=$1
		return 0
	else
		echo "DEBUG: $*"
		EXPORT_OPTIONS=`echo "$*" | awk '{gsub(/(X( |$)|c( |$)|q( |$)|d( |$)|o( |$)|t( |$)|b( |$)|s( |$)|f( |$)|no-data-tables|no-data-tables-accessmethods|ss( |$)|si( |$)|nw( |$))/, "-&",$0);print $0}'`
		return 0
	fi
}


get_args $*
if [ $? != 0 ]
then
        show_usage
        exit 1
fi

if [ "X${EXPORT_FLAG}" != "X1" ]
then
	if [ ! -f ${SQL_FILE} ]
	then
		printf "${PROGNAME}: SQL file ( %s ) does not exist\n" ${SQL_FILE} >&2
		exit 1
	else
		if [ ! -r ${SQL_FILE} ]
		then
			printf "${PROGNAME}: SQL file ( %s ) cannot be read\n" ${SQL_FILE} >&2
			exit 1
		fi
	fi
else
	if [ "X${ITERACTION_FILE_FLAG}" = "X1" -a "${GLOBAL_FILE_FLAG}" != "X1" ]
	then
		printf "${PROGNAME}: Options -i and -g must be used together\n" >&2
		exit 1
	fi
fi

if [ "X${DB_LOCALE}" != "X" ]
then
	LOCALE_ORI=$DB_LOCALE
else
	LOCALE_ORI=CLEAR
fi

if [ "X${INCLUDE_SYSTEM_DBS_FLAG}" = "X1" ]
then
	WHERE_CLAUSE="1 = 1"
else
	WHERE_CLAUSE="dbs_dbsname NOT IN ('sysmaster','sysutils','sysha', 'sysadmin', 'syscdr', 'sysuser' )"
fi

dbaccess sysmaster <<!EOF 2>${TMP_FILE_ERR}
UNLOAD TO $TMP_FILE_UNL DELIMITER " "
SELECT
	dbs_dbsname,
	dbs_collate
FROM
	sysdbslocale
WHERE
	$WHERE_CLAUSE
!EOF

if [ $? != 0 ]
then
	printf "Couldn't get the list of databases:\n" >&2
	cat ${TMP_FILE_ERR} >&2
	exit 1
fi


if [ "X${EXPORT_FLAG}" != "X1" ]
then
	if [ "X${NO_IGNORE_ERRORS}" != "X0" ]
	then
		export DBACCNOIGN=1
	else
		unset DBACCNOIGN
	fi
fi


if [ "X${GLOBAL_FILE_FLAG}" = "X1" ]
then
	echo "" > $GLOBAL_FILE
fi

cat ${TMP_FILE_UNL} | while read DB LOCALE
do
	export DB_LOCALE=$LOCALE
	if [ "X${EXPORT_FLAG}" != "X1" ]
	then
		dbaccess $DB $SQL_FILE 2>${TMP_FILE_ERR}
		RC=$?
	else
		dbexport -d $DB $EXPORT_OPTIONS
		RC=$?
	fi
	if [ $RC != 0 ]
	then
		printf -- "-------------------------------------------------------\nDatabase: %s\n-------------------------------------------------------\n" $DB >&2
		printf "Some errors ocurred while processing database (%s)\n" $DB >&2
		cat ${TMP_FILE_ERR} >&2
		if [ "X${NO_IGNORE_ERRORS}" = "X2" ]
		then
			printf "Option -N was used. Aborting processing for the rest of the databases\n" >&2
			exit 1
		fi
	else
		if [ "X${GLOBAL_FILE_FLAG}" = "X1" ]
		then
			cat $ITERACTION_FILE >> $GLOBAL_FILE
		fi
		printf -- "-------------------------------------------------------\nDatabase: %s OK!\n-------------------------------------------------------\n" $DB >&2
	fi
done

if [ "X${LOCALE_ORI}" = "XCLEAR" ]
then
	unset DB_LOCALE
else
	export DB_LOCALE=$LOCALE_ORI
fi
